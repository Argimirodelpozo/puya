contract examples.abi_types.contract.AbiTypesContract:
    program approval:
        subroutine examples.abi_types.contract.AbiTypesContract.approval_program() -> uint64:
            block@0: // L21
                let some_bytes#0: bytes = "Hello World!"
                let length%0#0: uint64 = (len some_bytes#0)
                let value_as_bytes%1#0: bytes = (itob length%0#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let some_bytes_as_string#0: bytes = (concat value_as_uint16%2#0 some_bytes#0)
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%3#0: uint64 = (!= some_bytes#0 some_bytes_as_string#0)
                (assert tmp%3#0) // Original bytes should not match encoded bytes
                let tmp%4#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%5#0: uint64 = (== some_bytes#0 tmp%4#0)
                (assert tmp%5#0) // Original bytes should match encoded if we strip the length header
                let tmp%6#0: uint64 = (== some_bytes#0 some_bytes_as_bytes_again#0)
                (assert tmp%6#0)
                let uint8#0: uint64 = 255u
                let val_as_bytes%7#0: bytes = (itob uint8#0)
                let int8_encoded#0: bytes = (substring3 val_as_bytes%7#0 7u 8u)
                let int8_decoded#0: uint64 = (getbyte int8_encoded#0 0u)
                let tmp%8#0: uint64 = (== uint8#0 int8_decoded#0)
                (assert tmp%8#0)
                let test_bytes#0: bytes = 0x7fffffffffffffff00
                let tmp%9#0: uint64 = (getbyte test_bytes#0 0u)
                let tmp%10#0: uint64 = (== tmp%9#0 127u)
                (assert tmp%10#0)
                let integer_bytes%11#0: bytes = (extract3 test_bytes#0 0u 3u)
                let tmp%12#0: uint64 = (btoi integer_bytes%11#0)
                let tmp%13#0: uint64 = (== tmp%12#0 8388607u)
                (assert tmp%13#0)
                let tmp%14#0: uint64 = (extract_uint16 test_bytes#0 0u)
                let tmp%15#0: uint64 = (== tmp%14#0 32767u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (extract_uint32 test_bytes#0 0u)
                let tmp%17#0: uint64 = (== tmp%16#0 2147483647u)
                (assert tmp%17#0)
                let tmp%18#0: uint64 = (extract_uint64 test_bytes#0 0u)
                let tmp%19#0: uint64 = (== tmp%18#0 9223372036854775807u)
                (assert tmp%19#0)
                let array_data%20#0: bytes = 0x0002
                let array_data%20#0: bytes = (concat array_data%20#0 0x01)
                let array_data%20#0: bytes = (concat array_data%20#0 0x02)
                let dynamic_uint8_array#0: bytes = array_data%20#0
                let array_data%21#0: bytes = 0x0001
                let array_data%21#0: bytes = (concat array_data%21#0 0x01)
                let aliased_dynamic#0: bytes = array_data%21#0
                let array_data%22#0: bytes = 0x0002
                let next_offset%23#0: uint64 = 4u
                let value_as_bytes%24#0: bytes = (itob next_offset%23#0)
                let value_as_uint16%25#0: bytes = ((extract 6 2) value_as_bytes%24#0)
                let array_data%22#0: bytes = (concat array_data%22#0 value_as_uint16%25#0)
                let element_length%26#0: uint64 = (len "\x00\x05Hello")
                let next_offset%23#0: uint64 = (+ next_offset%23#0 element_length%26#0)
                let value_as_bytes%27#0: bytes = (itob next_offset%23#0)
                let value_as_uint16%28#0: bytes = ((extract 6 2) value_as_bytes%27#0)
                let array_data%22#0: bytes = (concat array_data%22#0 value_as_uint16%28#0)
                let element_length%29#0: uint64 = (len "\x00\x05World")
                let next_offset%23#0: uint64 = (+ next_offset%23#0 element_length%29#0)
                let array_data%22#0: bytes = (concat array_data%22#0 "\x00\x05Hello")
                let array_data%22#0: bytes = (concat array_data%22#0 "\x00\x05World")
                let dynamic_string_array#0: bytes = array_data%22#0
                let array_data%30#0: bytes = 0x01
                let array_data%30#0: bytes = (concat array_data%30#0 0x0a)
                let array_data%30#0: bytes = (concat array_data%30#0 0xff)
                let array_data%30#0: bytes = (concat array_data%30#0 0x80)
                let static_uint8_array#0: bytes = array_data%30#0
                let array_data%31#0: bytes = 0x01
                let aliased_static#0: bytes = array_data%31#0
                let next_offset%32#0: uint64 = 4u
                let value_as_bytes%33#0: bytes = (itob next_offset%32#0)
                let value_as_uint16%34#0: bytes = ((extract 6 2) value_as_bytes%33#0)
                let array_data%35#0: bytes = value_as_uint16%34#0
                let element_length%36#0: uint64 = (len "\x00\x04Ping")
                let next_offset%32#0: uint64 = (+ next_offset%32#0 element_length%36#0)
                let value_as_bytes%37#0: bytes = (itob next_offset%32#0)
                let value_as_uint16%38#0: bytes = ((extract 6 2) value_as_bytes%37#0)
                let array_data%35#0: bytes = (concat array_data%35#0 value_as_uint16%38#0)
                let element_length%39#0: uint64 = (len "\x00\x04Pong")
                let next_offset%32#0: uint64 = (+ next_offset%32#0 element_length%39#0)
                let array_data%35#0: bytes = (concat array_data%35#0 "\x00\x04Ping")
                let array_data%35#0: bytes = (concat array_data%35#0 "\x00\x04Pong")
                let static_string_array#0: bytes = array_data%35#0
                return 1u
    
    program clear-state:
        subroutine examples.abi_types.contract.AbiTypesContract.clear_state_program() -> uint64:
            block@0: // L69
                return 1u