contract examples.abi_types.contract.AbiTypesContract:
    program approval:
        subroutine examples.abi_types.contract.AbiTypesContract.approval_program() -> uint64:
            block@0: // L21
                let length%0#0: uint64 = (len "Hello World!")
                let value_as_bytes%1#0: bytes = (itob length%0#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let some_bytes_as_string#0: bytes = (concat value_as_uint16%2#0 "Hello World!")
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%3#0: uint64 = (!= "Hello World!" some_bytes_as_string#0)
                (assert tmp%3#0) // Original bytes should not match encoded bytes
                let tmp%4#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%5#0: uint64 = (== "Hello World!" tmp%4#0)
                (assert tmp%5#0) // Original bytes should match encoded if we strip the length header
                let tmp%6#0: uint64 = (== "Hello World!" some_bytes_as_bytes_again#0)
                (assert tmp%6#0)
                let val_as_bytes%7#0: bytes = (itob 255u)
                let int8_encoded#0: bytes = (substring3 val_as_bytes%7#0 7u 8u)
                let int8_decoded#0: uint64 = (getbyte int8_encoded#0 0u)
                let tmp%8#0: uint64 = (== 255u int8_decoded#0)
                (assert tmp%8#0)
                let tmp%9#0: uint64 = (getbyte 0x7fffffffffffffff00 0u)
                let tmp%10#0: uint64 = (== tmp%9#0 127u)
                (assert tmp%10#0)
                let integer_bytes%11#0: bytes = (extract3 0x7fffffffffffffff00 0u 3u)
                let tmp%12#0: uint64 = (btoi integer_bytes%11#0)
                let tmp%13#0: uint64 = (== tmp%12#0 8388607u)
                (assert tmp%13#0)
                let tmp%14#0: uint64 = (extract_uint16 0x7fffffffffffffff00 0u)
                let tmp%15#0: uint64 = (== tmp%14#0 32767u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (extract_uint32 0x7fffffffffffffff00 0u)
                let tmp%17#0: uint64 = (== tmp%16#0 2147483647u)
                (assert tmp%17#0)
                let tmp%18#0: uint64 = (extract_uint64 0x7fffffffffffffff00 0u)
                let tmp%19#0: uint64 = (== tmp%18#0 9223372036854775807u)
                (assert tmp%19#0)
                let array_data%20#1: bytes = (concat 0x0002 0x01)
                let dynamic_uint8_array#0: bytes = (concat array_data%20#1 0x02)
                let aliased_dynamic#0: bytes = (concat 0x0001 0x01)
                let value_as_bytes%24#0: bytes = (itob 4u)
                let value_as_uint16%25#0: bytes = ((extract 6 2) value_as_bytes%24#0)
                let array_data%22#1: bytes = (concat 0x0002 value_as_uint16%25#0)
                let next_offset%23#1: uint64 = (+ 4u 7u)
                let value_as_bytes%27#0: bytes = (itob next_offset%23#1)
                let value_as_uint16%28#0: bytes = ((extract 6 2) value_as_bytes%27#0)
                let array_data%22#2: bytes = (concat array_data%22#1 value_as_uint16%28#0)
                let next_offset%23#2: uint64 = (+ next_offset%23#1 7u)
                let array_data%22#3: bytes = (concat array_data%22#2 "\x00\x05Hello")
                let dynamic_string_array#0: bytes = (concat array_data%22#3 "\x00\x05World")
                let array_data%30#1: bytes = (concat 0x01 0x0a)
                let array_data%30#2: bytes = (concat array_data%30#1 0xff)
                let static_uint8_array#0: bytes = (concat array_data%30#2 0x80)
                let value_as_bytes%33#0: bytes = (itob 4u)
                let value_as_uint16%34#0: bytes = ((extract 6 2) value_as_bytes%33#0)
                let next_offset%32#1: uint64 = (+ 4u 6u)
                let value_as_bytes%37#0: bytes = (itob next_offset%32#1)
                let value_as_uint16%38#0: bytes = ((extract 6 2) value_as_bytes%37#0)
                let array_data%35#1: bytes = (concat value_as_uint16%34#0 value_as_uint16%38#0)
                let next_offset%32#2: uint64 = (+ next_offset%32#1 6u)
                let array_data%35#2: bytes = (concat array_data%35#1 "\x00\x04Ping")
                let static_string_array#0: bytes = (concat array_data%35#2 "\x00\x04Pong")
                return 1u
    
    program clear-state:
        subroutine examples.abi_types.contract.AbiTypesContract.clear_state_program() -> uint64:
            block@0: // L69
                return 1u