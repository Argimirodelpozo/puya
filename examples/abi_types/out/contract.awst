contract AbiTypesContract
{
  approval_program(): bool
  {
    some_bytes: algopy.Bytes = 'Hello World!'
    some_bytes_as_string: algopy.arc4.String = abi_encode(some_bytes, algopy.arc4.String)
    some_bytes_as_bytes_again: algopy.Bytes = abi_decode(some_bytes_as_string, algopy.Bytes)
    assert(some_bytes != reinterpret_cast<algopy.Bytes>(some_bytes_as_string), comment="Original bytes should not match encoded bytes")
    assert(some_bytes == reinterpret_cast<algopy.Bytes>(some_bytes_as_string)[2u:], comment="Original bytes should match encoded if we strip the length header")
    assert(some_bytes == some_bytes_as_bytes_again)
    uint8: algopy.UInt64 = 255u
    int8_encoded: algopy.arc4.UIntN = abi_encode(uint8, algopy.arc4.UIntN)
    int8_decoded: algopy.UInt64 = abi_decode(int8_encoded, algopy.UInt64)
    assert(uint8 == int8_decoded)
    test_bytes: algopy.Bytes = Bytes.from_base16("7FFFFFFFFFFFFFFF00")
    assert(abi_decode(reinterpret_cast<algopy.arc4.UIntN>(test_bytes), algopy.UInt64) == 127u)
    assert(abi_decode(reinterpret_cast<algopy.arc4.UIntN>(test_bytes), algopy.UInt64) == 8388607u)
    assert(abi_decode(reinterpret_cast<algopy.arc4.UIntN>(test_bytes), algopy.UInt64) == 32767u)
    assert(abi_decode(reinterpret_cast<algopy.arc4.UIntN>(test_bytes), algopy.UInt64) == 2147483647u)
    assert(abi_decode(reinterpret_cast<algopy.arc4.UIntN>(test_bytes), algopy.UInt64) == 9223372036854775807u)
    dynamic_uint8_array: algopy.arc4.DynamicArray = new algopy.arc4.UIntN[](abi_constant('\x01', algopy.arc4.UIntN), abi_constant('\x02', algopy.arc4.UIntN))
    aliased_dynamic: algopy.arc4.DynamicArray = new algopy.arc4.UIntN[](abi_constant('\x01', algopy.arc4.UIntN))
    dynamic_string_array: algopy.arc4.DynamicArray = new algopy.arc4.String[](abi_constant('\x00\x05Hello', algopy.arc4.String), abi_constant('\x00\x05World', algopy.arc4.String))
    static_uint8_array: algopy.arc4.StaticArray = new algopy.arc4.UIntN[4](abi_constant('\x01', algopy.arc4.UIntN), abi_constant('\n', algopy.arc4.UIntN), abi_constant('\xff', algopy.arc4.UIntN), abi_constant('\x80', algopy.arc4.UIntN))
    aliased_static: algopy.arc4.StaticArray = new algopy.arc4.UIntN[1](abi_constant('\x01', algopy.arc4.UIntN))
    static_string_array: algopy.arc4.StaticArray = new algopy.arc4.String[2](abi_constant('\x00\x04Ping', algopy.arc4.String), abi_constant('\x00\x04Pong', algopy.arc4.String))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}