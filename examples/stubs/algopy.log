>> poetry run algopy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 stubs
info: Building AWST for __init__.py
info: Building AWST for stubs
info: Building AWST for stubs/uint64.py
info: Building AWST for stubs/bytes.py
info: Building AWST for stubs/biguint.py
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L55
debug: Sealing block@None: // ternary_false_L55
debug: Terminated block@1: // ternary_true_L55
debug: Terminated block@2: // ternary_false_L55
debug: Sealing block@3: // ternary_merge_L55
debug: Created Phi assignment: let ternary_result%27#2: uint64 = undefined while trying to resolve 'ternary_result%27' in block@3: // ternary_merge_L55
debug: Added ternary_result%27#0 to Phi node: let ternary_result%27#2: uint64 = φ(ternary_result%27#0 <- block@1) in block@1: // ternary_true_L55
debug: Added ternary_result%27#1 to Phi node: let ternary_result%27#2: uint64 = φ(ternary_result%27#0 <- block@1, ternary_result%27#1 <- block@2) in block@2: // ternary_false_L55
debug: Created Phi assignment: let true#1: uint64 = undefined while trying to resolve 'true' in block@3: // ternary_merge_L55
debug: Added true#0 to Phi node: let true#1: uint64 = φ(true#0 <- block@1) in block@1: // ternary_true_L55
debug: Added true#0 to Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2)
debug: Replaced trivial Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L55
debug: Sealing block@None: // ternary_true_L56
debug: Sealing block@None: // ternary_false_L56
debug: Terminated block@4: // ternary_true_L56
debug: Created Phi assignment: let false#1: uint64 = undefined while trying to resolve 'false' in block@3: // ternary_merge_L55
debug: Added false#0 to Phi node: let false#1: uint64 = φ(false#0 <- block@1) in block@1: // ternary_true_L55
debug: Added false#0 to Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2)
debug: Replaced trivial Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_false_L56
debug: Sealing block@6: // ternary_merge_L56
debug: Created Phi assignment: let ternary_result%29#2: uint64 = undefined while trying to resolve 'ternary_result%29' in block@6: // ternary_merge_L56
debug: Added ternary_result%29#0 to Phi node: let ternary_result%29#2: uint64 = φ(ternary_result%29#0 <- block@4) in block@4: // ternary_true_L56
debug: Added ternary_result%29#1 to Phi node: let ternary_result%29#2: uint64 = φ(ternary_result%29#0 <- block@4, ternary_result%29#1 <- block@5) in block@5: // ternary_false_L56
debug: Created Phi assignment: let false#2: uint64 = undefined while trying to resolve 'false' in block@6: // ternary_merge_L56
debug: Added false#0 to Phi node: let false#2: uint64 = φ(false#0 <- block@4) in block@4: // ternary_true_L56
debug: Added false#0 to Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L56
debug: Sealing block@None: // ternary_true_L57
debug: Sealing block@None: // ternary_false_L57
debug: Terminated block@7: // ternary_true_L57
debug: Created Phi assignment: let true#2: uint64 = undefined while trying to resolve 'true' in block@6: // ternary_merge_L56
debug: Added true#0 to Phi node: let true#2: uint64 = φ(true#0 <- block@4) in block@4: // ternary_true_L56
debug: Added true#0 to Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0 in current definition for 1 blocks
debug: Terminated block@8: // ternary_false_L57
debug: Sealing block@9: // ternary_merge_L57
debug: Created Phi assignment: let ternary_result%31#2: uint64 = undefined while trying to resolve 'ternary_result%31' in block@9: // ternary_merge_L57
debug: Added ternary_result%31#0 to Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@7) in block@7: // ternary_true_L57
debug: Added ternary_result%31#1 to Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@7, ternary_result%31#1 <- block@8) in block@8: // ternary_false_L57
debug: Created Phi assignment: let false#3: uint64 = undefined while trying to resolve 'false' in block@9: // ternary_merge_L57
debug: Added false#0 to Phi node: let false#3: uint64 = φ(false#0 <- block@7) in block@7: // ternary_true_L57
debug: Added false#0 to Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8)
debug: Replaced trivial Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L57
debug: Sealing block@None: // ternary_true_L58
debug: Sealing block@None: // ternary_false_L58
debug: Terminated block@10: // ternary_true_L58
debug: Terminated block@11: // ternary_false_L58
debug: Sealing block@12: // ternary_merge_L58
debug: Created Phi assignment: let ternary_result%33#2: uint64 = undefined while trying to resolve 'ternary_result%33' in block@12: // ternary_merge_L58
debug: Added ternary_result%33#0 to Phi node: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@10) in block@10: // ternary_true_L58
debug: Added ternary_result%33#1 to Phi node: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@10, ternary_result%33#1 <- block@11) in block@11: // ternary_false_L58
debug: Created Phi assignment: let false#4: uint64 = undefined while trying to resolve 'false' in block@12: // ternary_merge_L58
debug: Added false#0 to Phi node: let false#4: uint64 = φ(false#0 <- block@10) in block@10: // ternary_true_L58
debug: Added false#0 to Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11)
debug: Replaced trivial Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let true#3: uint64 = undefined while trying to resolve 'true' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let true#4: uint64 = undefined while trying to resolve 'true' in block@9: // ternary_merge_L57
debug: Added true#0 to Phi node: let true#4: uint64 = φ(true#0 <- block@7) in block@7: // ternary_true_L57
debug: Added true#0 to Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8)
debug: Replaced trivial Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) (true#4) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#3: uint64 = φ(true#0 <- block@10) in block@10: // ternary_true_L58
debug: Added true#0 to Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11)
debug: Replaced trivial Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L58
debug: Sealing block@None: // ternary_true_L59
debug: Sealing block@None: // ternary_false_L59
debug: Terminated block@13: // ternary_true_L59
debug: Terminated block@14: // ternary_false_L59
debug: Sealing block@15: // ternary_merge_L59
debug: Created Phi assignment: let ternary_result%35#2: uint64 = undefined while trying to resolve 'ternary_result%35' in block@15: // ternary_merge_L59
debug: Added ternary_result%35#0 to Phi node: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@13) in block@13: // ternary_true_L59
debug: Added ternary_result%35#1 to Phi node: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@13, ternary_result%35#1 <- block@14) in block@14: // ternary_false_L59
debug: Created Phi assignment: let true#5: uint64 = undefined while trying to resolve 'true' in block@15: // ternary_merge_L59
debug: Added true#0 to Phi node: let true#5: uint64 = φ(true#0 <- block@13) in block@13: // ternary_true_L59
debug: Added true#0 to Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14)
debug: Replaced trivial Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) (true#5) with true#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L59
debug: Sealing block@None: // ternary_true_L60
debug: Sealing block@None: // ternary_false_L60
debug: Terminated block@16: // ternary_true_L60
debug: Created Phi assignment: let false#5: uint64 = undefined while trying to resolve 'false' in block@15: // ternary_merge_L59
debug: Added false#0 to Phi node: let false#5: uint64 = φ(false#0 <- block@13) in block@13: // ternary_true_L59
debug: Added false#0 to Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0
debug: Deleting Phi assignment: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14)
debug: Replaced trivial Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0 in current definition for 1 blocks
debug: Terminated block@17: // ternary_false_L60
debug: Sealing block@18: // ternary_merge_L60
debug: Created Phi assignment: let ternary_result%37#2: uint64 = undefined while trying to resolve 'ternary_result%37' in block@18: // ternary_merge_L60
debug: Added ternary_result%37#0 to Phi node: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@16) in block@16: // ternary_true_L60
debug: Added ternary_result%37#1 to Phi node: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@16, ternary_result%37#1 <- block@17) in block@17: // ternary_false_L60
debug: Created Phi assignment: let true#6: uint64 = undefined while trying to resolve 'true' in block@18: // ternary_merge_L60
debug: Added true#0 to Phi node: let true#6: uint64 = φ(true#0 <- block@16) in block@16: // ternary_true_L60
debug: Added true#0 to Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0
debug: Deleting Phi assignment: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17)
debug: Replaced trivial Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#6: uint64 = undefined while trying to resolve 'false' in block@18: // ternary_merge_L60
debug: Added false#0 to Phi node: let false#6: uint64 = φ(false#0 <- block@16) in block@16: // ternary_true_L60
debug: Added false#0 to Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0
debug: Deleting Phi assignment: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17)
debug: Replaced trivial Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L60
debug: Sealing block@None: // ternary_true_L61
debug: Sealing block@None: // ternary_false_L61
debug: Terminated block@19: // ternary_true_L61
debug: Terminated block@20: // ternary_false_L61
debug: Sealing block@21: // ternary_merge_L61
debug: Created Phi assignment: let ternary_result%39#2: uint64 = undefined while trying to resolve 'ternary_result%39' in block@21: // ternary_merge_L61
debug: Added ternary_result%39#0 to Phi node: let ternary_result%39#2: uint64 = φ(ternary_result%39#0 <- block@19) in block@19: // ternary_true_L61
debug: Added ternary_result%39#1 to Phi node: let ternary_result%39#2: uint64 = φ(ternary_result%39#0 <- block@19, ternary_result%39#1 <- block@20) in block@20: // ternary_false_L61
debug: Created Phi assignment: let true#7: uint64 = undefined while trying to resolve 'true' in block@21: // ternary_merge_L61
debug: Added true#0 to Phi node: let true#7: uint64 = φ(true#0 <- block@19) in block@19: // ternary_true_L61
debug: Added true#0 to Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0
debug: Deleting Phi assignment: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20)
debug: Replaced trivial Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#7: uint64 = undefined while trying to resolve 'false' in block@21: // ternary_merge_L61
debug: Added false#0 to Phi node: let false#7: uint64 = φ(false#0 <- block@19) in block@19: // ternary_true_L61
debug: Added false#0 to Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0
debug: Deleting Phi assignment: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20)
debug: Replaced trivial Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L61
debug: Sealing block@None: // ternary_true_L62
debug: Sealing block@None: // ternary_false_L62
debug: Terminated block@22: // ternary_true_L62
debug: Terminated block@23: // ternary_false_L62
debug: Sealing block@24: // ternary_merge_L62
debug: Created Phi assignment: let ternary_result%41#2: uint64 = undefined while trying to resolve 'ternary_result%41' in block@24: // ternary_merge_L62
debug: Added ternary_result%41#0 to Phi node: let ternary_result%41#2: uint64 = φ(ternary_result%41#0 <- block@22) in block@22: // ternary_true_L62
debug: Added ternary_result%41#1 to Phi node: let ternary_result%41#2: uint64 = φ(ternary_result%41#0 <- block@22, ternary_result%41#1 <- block@23) in block@23: // ternary_false_L62
debug: Created Phi assignment: let false#8: uint64 = undefined while trying to resolve 'false' in block@24: // ternary_merge_L62
debug: Added false#0 to Phi node: let false#8: uint64 = φ(false#0 <- block@22) in block@22: // ternary_true_L62
debug: Added false#0 to Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0
debug: Deleting Phi assignment: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23)
debug: Replaced trivial Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let one#1: uint64 = undefined while trying to resolve 'one' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let one#2: uint64 = undefined while trying to resolve 'one' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let one#3: uint64 = undefined while trying to resolve 'one' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let one#4: uint64 = undefined while trying to resolve 'one' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let one#5: uint64 = undefined while trying to resolve 'one' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let one#6: uint64 = undefined while trying to resolve 'one' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let one#7: uint64 = undefined while trying to resolve 'one' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let one#8: uint64 = undefined while trying to resolve 'one' in block@3: // ternary_merge_L55
debug: Added one#0 to Phi node: let one#8: uint64 = φ(one#0 <- block@1) in block@1: // ternary_true_L55
debug: Added one#0 to Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) (one#8) with one#0
debug: Deleting Phi assignment: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2)
debug: Replaced trivial Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) (one#8) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#7: uint64 = φ(one#0 <- block@4) in block@4: // ternary_true_L56
debug: Added one#0 to Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) (one#7) with one#0
debug: Deleting Phi assignment: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5)
debug: Replaced trivial Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) (one#7) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#6: uint64 = φ(one#0 <- block@7) in block@7: // ternary_true_L57
debug: Added one#0 to Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) (one#6) with one#0
debug: Deleting Phi assignment: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8)
debug: Replaced trivial Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) (one#6) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#5: uint64 = φ(one#0 <- block@10) in block@10: // ternary_true_L58
debug: Added one#0 to Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) (one#5) with one#0
debug: Deleting Phi assignment: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11)
debug: Replaced trivial Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) (one#5) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#4: uint64 = φ(one#0 <- block@13) in block@13: // ternary_true_L59
debug: Added one#0 to Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) (one#4) with one#0
debug: Deleting Phi assignment: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14)
debug: Replaced trivial Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) (one#4) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#3: uint64 = φ(one#0 <- block@16) in block@16: // ternary_true_L60
debug: Added one#0 to Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) (one#3) with one#0
debug: Deleting Phi assignment: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17)
debug: Replaced trivial Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) (one#3) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#2: uint64 = φ(one#0 <- block@19) in block@19: // ternary_true_L61
debug: Added one#0 to Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) (one#2) with one#0
debug: Deleting Phi assignment: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20)
debug: Replaced trivial Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) (one#2) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@22) in block@22: // ternary_true_L62
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) (one#1) with one#0
debug: Deleting Phi assignment: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23)
debug: Replaced trivial Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) (one#1) with one#0 in current definition for 1 blocks
debug: Created Phi assignment: let five#1: uint64 = undefined while trying to resolve 'five' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let five#2: uint64 = undefined while trying to resolve 'five' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let five#3: uint64 = undefined while trying to resolve 'five' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let five#4: uint64 = undefined while trying to resolve 'five' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let five#5: uint64 = undefined while trying to resolve 'five' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let five#6: uint64 = undefined while trying to resolve 'five' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let five#7: uint64 = undefined while trying to resolve 'five' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let five#8: uint64 = undefined while trying to resolve 'five' in block@3: // ternary_merge_L55
debug: Added five#0 to Phi node: let five#8: uint64 = φ(five#0 <- block@1) in block@1: // ternary_true_L55
debug: Added five#0 to Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) (five#8) with five#0
debug: Deleting Phi assignment: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2)
debug: Replaced trivial Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) (five#8) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#7: uint64 = φ(five#0 <- block@4) in block@4: // ternary_true_L56
debug: Added five#0 to Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) (five#7) with five#0
debug: Deleting Phi assignment: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5)
debug: Replaced trivial Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) (five#7) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#6: uint64 = φ(five#0 <- block@7) in block@7: // ternary_true_L57
debug: Added five#0 to Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) (five#6) with five#0
debug: Deleting Phi assignment: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8)
debug: Replaced trivial Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) (five#6) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#5: uint64 = φ(five#0 <- block@10) in block@10: // ternary_true_L58
debug: Added five#0 to Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) (five#5) with five#0
debug: Deleting Phi assignment: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11)
debug: Replaced trivial Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) (five#5) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#4: uint64 = φ(five#0 <- block@13) in block@13: // ternary_true_L59
debug: Added five#0 to Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) (five#4) with five#0
debug: Deleting Phi assignment: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14)
debug: Replaced trivial Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) (five#4) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#3: uint64 = φ(five#0 <- block@16) in block@16: // ternary_true_L60
debug: Added five#0 to Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) (five#3) with five#0
debug: Deleting Phi assignment: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17)
debug: Replaced trivial Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) (five#3) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#2: uint64 = φ(five#0 <- block@19) in block@19: // ternary_true_L61
debug: Added five#0 to Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) (five#2) with five#0
debug: Deleting Phi assignment: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20)
debug: Replaced trivial Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) (five#2) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#1: uint64 = φ(five#0 <- block@22) in block@22: // ternary_true_L62
debug: Added five#0 to Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) (five#1) with five#0
debug: Deleting Phi assignment: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23)
debug: Replaced trivial Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) (five#1) with five#0 in current definition for 1 blocks
debug: Created Phi assignment: let sixty#1: uint64 = undefined while trying to resolve 'sixty' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let sixty#2: uint64 = undefined while trying to resolve 'sixty' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let sixty#3: uint64 = undefined while trying to resolve 'sixty' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let sixty#4: uint64 = undefined while trying to resolve 'sixty' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let sixty#5: uint64 = undefined while trying to resolve 'sixty' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let sixty#6: uint64 = undefined while trying to resolve 'sixty' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let sixty#7: uint64 = undefined while trying to resolve 'sixty' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let sixty#8: uint64 = undefined while trying to resolve 'sixty' in block@3: // ternary_merge_L55
debug: Added sixty#0 to Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1) in block@1: // ternary_true_L55
debug: Added sixty#0 to Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) (sixty#8) with sixty#0
debug: Deleting Phi assignment: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2)
debug: Replaced trivial Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) (sixty#8) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4) in block@4: // ternary_true_L56
debug: Added sixty#0 to Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) (sixty#7) with sixty#0
debug: Deleting Phi assignment: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5)
debug: Replaced trivial Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) (sixty#7) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7) in block@7: // ternary_true_L57
debug: Added sixty#0 to Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) (sixty#6) with sixty#0
debug: Deleting Phi assignment: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8)
debug: Replaced trivial Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) (sixty#6) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10) in block@10: // ternary_true_L58
debug: Added sixty#0 to Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) (sixty#5) with sixty#0
debug: Deleting Phi assignment: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11)
debug: Replaced trivial Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) (sixty#5) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13) in block@13: // ternary_true_L59
debug: Added sixty#0 to Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) (sixty#4) with sixty#0
debug: Deleting Phi assignment: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14)
debug: Replaced trivial Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) (sixty#4) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16) in block@16: // ternary_true_L60
debug: Added sixty#0 to Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) (sixty#3) with sixty#0
debug: Deleting Phi assignment: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17)
debug: Replaced trivial Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) (sixty#3) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19) in block@19: // ternary_true_L61
debug: Added sixty#0 to Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) (sixty#2) with sixty#0
debug: Deleting Phi assignment: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20)
debug: Replaced trivial Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) (sixty#2) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22) in block@22: // ternary_true_L62
debug: Added sixty#0 to Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) (sixty#1) with sixty#0
debug: Deleting Phi assignment: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23)
debug: Replaced trivial Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) (sixty#1) with sixty#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L62
debug: Sealing block@0: // L78
debug: Terminated block@0: // L78
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L38
debug: Sealing block@None: // ternary_false_L38
debug: Terminated block@1: // ternary_true_L38
debug: Terminated block@2: // ternary_false_L38
debug: Sealing block@3: // ternary_merge_L38
debug: Created Phi assignment: let ternary_result%40#2: bytes = undefined while trying to resolve 'ternary_result%40' in block@3: // ternary_merge_L38
debug: Added ternary_result%40#0 to Phi node: let ternary_result%40#2: bytes = φ(ternary_result%40#0 <- block@1) in block@1: // ternary_true_L38
debug: Added ternary_result%40#1 to Phi node: let ternary_result%40#2: bytes = φ(ternary_result%40#0 <- block@1, ternary_result%40#1 <- block@2) in block@2: // ternary_false_L38
debug: Created Phi assignment: let true#1: bytes = undefined while trying to resolve 'true' in block@3: // ternary_merge_L38
debug: Added true#0 to Phi node: let true#1: bytes = φ(true#0 <- block@1) in block@1: // ternary_true_L38
debug: Added true#0 to Phi node: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2) in block@2: // ternary_false_L38
debug: Replacing trivial Phi node: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2)
debug: Replaced trivial Phi node: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L38
debug: Sealing block@None: // ternary_true_L41
debug: Sealing block@None: // ternary_false_L41
debug: Terminated block@4: // ternary_true_L41
debug: Terminated block@5: // ternary_false_L41
debug: Sealing block@6: // ternary_merge_L41
debug: Created Phi assignment: let ternary_result%42#2: bytes = undefined while trying to resolve 'ternary_result%42' in block@6: // ternary_merge_L41
debug: Added ternary_result%42#0 to Phi node: let ternary_result%42#2: bytes = φ(ternary_result%42#0 <- block@4) in block@4: // ternary_true_L41
debug: Added ternary_result%42#1 to Phi node: let ternary_result%42#2: bytes = φ(ternary_result%42#0 <- block@4, ternary_result%42#1 <- block@5) in block@5: // ternary_false_L41
debug: Created Phi assignment: let true#2: bytes = undefined while trying to resolve 'true' in block@6: // ternary_merge_L41
debug: Added true#0 to Phi node: let true#2: bytes = φ(true#0 <- block@4) in block@4: // ternary_true_L41
debug: Added true#0 to Phi node: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5) in block@5: // ternary_false_L41
debug: Replacing trivial Phi node: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L41
debug: Sealing block@None: // ternary_true_L42
debug: Sealing block@None: // ternary_false_L42
debug: Terminated block@7: // ternary_true_L42
debug: Created Phi assignment: let false#1: bytes = undefined while trying to resolve 'false' in block@6: // ternary_merge_L41
debug: Created Phi assignment: let false#2: bytes = undefined while trying to resolve 'false' in block@3: // ternary_merge_L38
debug: Added false#0 to Phi node: let false#2: bytes = φ(false#0 <- block@1) in block@1: // ternary_true_L38
debug: Added false#0 to Phi node: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2) in block@2: // ternary_false_L38
debug: Replacing trivial Phi node: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2)
debug: Replaced trivial Phi node: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2) (false#2) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#1: bytes = φ(false#0 <- block@4) in block@4: // ternary_true_L41
debug: Added false#0 to Phi node: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5) in block@5: // ternary_false_L41
debug: Replacing trivial Phi node: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@8: // ternary_false_L42
debug: Sealing block@9: // ternary_merge_L42
debug: Created Phi assignment: let ternary_result%45#2: bytes = undefined while trying to resolve 'ternary_result%45' in block@9: // ternary_merge_L42
debug: Added ternary_result%45#0 to Phi node: let ternary_result%45#2: bytes = φ(ternary_result%45#0 <- block@7) in block@7: // ternary_true_L42
debug: Added ternary_result%45#1 to Phi node: let ternary_result%45#2: bytes = φ(ternary_result%45#0 <- block@7, ternary_result%45#1 <- block@8) in block@8: // ternary_false_L42
debug: Created Phi assignment: let false#3: bytes = undefined while trying to resolve 'false' in block@9: // ternary_merge_L42
debug: Added false#0 to Phi node: let false#3: bytes = φ(false#0 <- block@7) in block@7: // ternary_true_L42
debug: Added false#0 to Phi node: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8) in block@8: // ternary_false_L42
debug: Replacing trivial Phi node: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8)
debug: Replaced trivial Phi node: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L42
debug: Sealing block@None: // ternary_true_L43
debug: Sealing block@None: // ternary_false_L43
debug: Terminated block@10: // ternary_true_L43
debug: Created Phi assignment: let true#3: bytes = undefined while trying to resolve 'true' in block@9: // ternary_merge_L42
debug: Added true#0 to Phi node: let true#3: bytes = φ(true#0 <- block@7) in block@7: // ternary_true_L42
debug: Added true#0 to Phi node: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8) in block@8: // ternary_false_L42
debug: Replacing trivial Phi node: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8)
debug: Replaced trivial Phi node: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@11: // ternary_false_L43
debug: Sealing block@12: // ternary_merge_L43
debug: Created Phi assignment: let ternary_result%48#2: bytes = undefined while trying to resolve 'ternary_result%48' in block@12: // ternary_merge_L43
debug: Added ternary_result%48#0 to Phi node: let ternary_result%48#2: bytes = φ(ternary_result%48#0 <- block@10) in block@10: // ternary_true_L43
debug: Added ternary_result%48#1 to Phi node: let ternary_result%48#2: bytes = φ(ternary_result%48#0 <- block@10, ternary_result%48#1 <- block@11) in block@11: // ternary_false_L43
debug: Created Phi assignment: let false#4: bytes = undefined while trying to resolve 'false' in block@12: // ternary_merge_L43
debug: Added false#0 to Phi node: let false#4: bytes = φ(false#0 <- block@10) in block@10: // ternary_true_L43
debug: Added false#0 to Phi node: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11) in block@11: // ternary_false_L43
debug: Replacing trivial Phi node: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11)
debug: Replaced trivial Phi node: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L43
debug: Sealing block@None: // ternary_true_L44
debug: Sealing block@None: // ternary_false_L44
debug: Terminated block@13: // ternary_true_L44
debug: Terminated block@14: // ternary_false_L44
debug: Sealing block@15: // ternary_merge_L44
debug: Created Phi assignment: let ternary_result%51#2: bytes = undefined while trying to resolve 'ternary_result%51' in block@15: // ternary_merge_L44
debug: Added ternary_result%51#0 to Phi node: let ternary_result%51#2: bytes = φ(ternary_result%51#0 <- block@13) in block@13: // ternary_true_L44
debug: Added ternary_result%51#1 to Phi node: let ternary_result%51#2: bytes = φ(ternary_result%51#0 <- block@13, ternary_result%51#1 <- block@14) in block@14: // ternary_false_L44
debug: Created Phi assignment: let false#5: bytes = undefined while trying to resolve 'false' in block@15: // ternary_merge_L44
debug: Added false#0 to Phi node: let false#5: bytes = φ(false#0 <- block@13) in block@13: // ternary_true_L44
debug: Added false#0 to Phi node: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14) in block@14: // ternary_false_L44
debug: Replacing trivial Phi node: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0
debug: Deleting Phi assignment: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14)
debug: Replaced trivial Phi node: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let true#4: bytes = undefined while trying to resolve 'true' in block@15: // ternary_merge_L44
debug: Created Phi assignment: let true#5: bytes = undefined while trying to resolve 'true' in block@12: // ternary_merge_L43
debug: Added true#0 to Phi node: let true#5: bytes = φ(true#0 <- block@10) in block@10: // ternary_true_L43
debug: Added true#0 to Phi node: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11) in block@11: // ternary_false_L43
debug: Replacing trivial Phi node: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11)
debug: Replaced trivial Phi node: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11) (true#5) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#4: bytes = φ(true#0 <- block@13) in block@13: // ternary_true_L44
debug: Added true#0 to Phi node: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14) in block@14: // ternary_false_L44
debug: Replacing trivial Phi node: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14)
debug: Replaced trivial Phi node: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14) (true#4) with true#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L44
debug: Sealing block@None: // ternary_true_L45
debug: Sealing block@None: // ternary_false_L45
debug: Terminated block@16: // ternary_true_L45
debug: Terminated block@17: // ternary_false_L45
debug: Sealing block@18: // ternary_merge_L45
debug: Created Phi assignment: let ternary_result%54#2: bytes = undefined while trying to resolve 'ternary_result%54' in block@18: // ternary_merge_L45
debug: Added ternary_result%54#0 to Phi node: let ternary_result%54#2: bytes = φ(ternary_result%54#0 <- block@16) in block@16: // ternary_true_L45
debug: Added ternary_result%54#1 to Phi node: let ternary_result%54#2: bytes = φ(ternary_result%54#0 <- block@16, ternary_result%54#1 <- block@17) in block@17: // ternary_false_L45
debug: Created Phi assignment: let true#6: bytes = undefined while trying to resolve 'true' in block@18: // ternary_merge_L45
debug: Added true#0 to Phi node: let true#6: bytes = φ(true#0 <- block@16) in block@16: // ternary_true_L45
debug: Added true#0 to Phi node: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17) in block@17: // ternary_false_L45
debug: Replacing trivial Phi node: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0
debug: Deleting Phi assignment: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17)
debug: Replaced trivial Phi node: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L45
debug: Sealing block@None: // ternary_true_L46
debug: Sealing block@None: // ternary_false_L46
debug: Terminated block@19: // ternary_true_L46
debug: Created Phi assignment: let false#6: bytes = undefined while trying to resolve 'false' in block@18: // ternary_merge_L45
debug: Added false#0 to Phi node: let false#6: bytes = φ(false#0 <- block@16) in block@16: // ternary_true_L45
debug: Added false#0 to Phi node: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17) in block@17: // ternary_false_L45
debug: Replacing trivial Phi node: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0
debug: Deleting Phi assignment: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17)
debug: Replaced trivial Phi node: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0 in current definition for 1 blocks
debug: Terminated block@20: // ternary_false_L46
debug: Sealing block@21: // ternary_merge_L46
debug: Created Phi assignment: let ternary_result%57#2: bytes = undefined while trying to resolve 'ternary_result%57' in block@21: // ternary_merge_L46
debug: Added ternary_result%57#0 to Phi node: let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@19) in block@19: // ternary_true_L46
debug: Added ternary_result%57#1 to Phi node: let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@19, ternary_result%57#1 <- block@20) in block@20: // ternary_false_L46
debug: Created Phi assignment: let true#7: bytes = undefined while trying to resolve 'true' in block@21: // ternary_merge_L46
debug: Added true#0 to Phi node: let true#7: bytes = φ(true#0 <- block@19) in block@19: // ternary_true_L46
debug: Added true#0 to Phi node: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20) in block@20: // ternary_false_L46
debug: Replacing trivial Phi node: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0
debug: Deleting Phi assignment: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20)
debug: Replaced trivial Phi node: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#7: bytes = undefined while trying to resolve 'false' in block@21: // ternary_merge_L46
debug: Added false#0 to Phi node: let false#7: bytes = φ(false#0 <- block@19) in block@19: // ternary_true_L46
debug: Added false#0 to Phi node: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20) in block@20: // ternary_false_L46
debug: Replacing trivial Phi node: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0
debug: Deleting Phi assignment: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20)
debug: Replaced trivial Phi node: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L46
debug: Sealing block@None: // ternary_true_L47
debug: Sealing block@None: // ternary_false_L47
debug: Terminated block@22: // ternary_true_L47
debug: Terminated block@23: // ternary_false_L47
debug: Sealing block@24: // ternary_merge_L47
debug: Created Phi assignment: let ternary_result%60#2: bytes = undefined while trying to resolve 'ternary_result%60' in block@24: // ternary_merge_L47
debug: Added ternary_result%60#0 to Phi node: let ternary_result%60#2: bytes = φ(ternary_result%60#0 <- block@22) in block@22: // ternary_true_L47
debug: Added ternary_result%60#1 to Phi node: let ternary_result%60#2: bytes = φ(ternary_result%60#0 <- block@22, ternary_result%60#1 <- block@23) in block@23: // ternary_false_L47
debug: Created Phi assignment: let true#8: bytes = undefined while trying to resolve 'true' in block@24: // ternary_merge_L47
debug: Added true#0 to Phi node: let true#8: bytes = φ(true#0 <- block@22) in block@22: // ternary_true_L47
debug: Added true#0 to Phi node: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23) in block@23: // ternary_false_L47
debug: Replacing trivial Phi node: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23) (true#8) with true#0
debug: Deleting Phi assignment: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23)
debug: Replaced trivial Phi node: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23) (true#8) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#8: bytes = undefined while trying to resolve 'false' in block@24: // ternary_merge_L47
debug: Added false#0 to Phi node: let false#8: bytes = φ(false#0 <- block@22) in block@22: // ternary_true_L47
debug: Added false#0 to Phi node: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23) in block@23: // ternary_false_L47
debug: Replacing trivial Phi node: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0
debug: Deleting Phi assignment: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23)
debug: Replaced trivial Phi node: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L47
debug: Sealing block@None: // ternary_true_L48
debug: Sealing block@None: // ternary_false_L48
debug: Terminated block@25: // ternary_true_L48
debug: Terminated block@26: // ternary_false_L48
debug: Sealing block@27: // ternary_merge_L48
debug: Created Phi assignment: let ternary_result%63#2: bytes = undefined while trying to resolve 'ternary_result%63' in block@27: // ternary_merge_L48
debug: Added ternary_result%63#0 to Phi node: let ternary_result%63#2: bytes = φ(ternary_result%63#0 <- block@25) in block@25: // ternary_true_L48
debug: Added ternary_result%63#1 to Phi node: let ternary_result%63#2: bytes = φ(ternary_result%63#0 <- block@25, ternary_result%63#1 <- block@26) in block@26: // ternary_false_L48
debug: Created Phi assignment: let false#9: bytes = undefined while trying to resolve 'false' in block@27: // ternary_merge_L48
debug: Added false#0 to Phi node: let false#9: bytes = φ(false#0 <- block@25) in block@25: // ternary_true_L48
debug: Added false#0 to Phi node: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26) in block@26: // ternary_false_L48
debug: Replacing trivial Phi node: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26) (false#9) with false#0
debug: Deleting Phi assignment: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26)
debug: Replaced trivial Phi node: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26) (false#9) with false#0 in current definition for 1 blocks
debug: Terminated block@27: // ternary_merge_L48
debug: Sealing block@0: // L71
debug: Terminated block@0: // L71
debug: Sealing block@0: // L16
debug: Terminated block@0: // L16
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Sealing block@0: // L36
debug: Terminated block@0: // L36
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Output IR to <git root>/examples/stubs/out/biguint_BigUIntContract.ssa.ir
info: Optimizing examples.stubs.biguint.BigUIntContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.stubs.biguint.BigUIntContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.compare_biguints
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.compare_biguint_vs_uint64
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.compare_uint64_vs_biguint
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded None == None to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.BigUIntContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/biguint_BigUIntContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.compare_biguints
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.biguint.BigUIntContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/stubs/out/biguint_BigUIntContract.cssa.ir
debug: Removing Phis from examples.stubs.biguint.BigUIntContract.approval_program
debug: Removing Phis from examples.stubs.biguint.compare_biguints
debug: Removing Phis from examples.stubs.biguint.compare_biguint_vs_uint64
debug: Removing Phis from examples.stubs.biguint.compare_uint64_vs_biguint
debug: Removing Phis from examples.stubs.biguint.BigUIntContract.clear_state_program
debug: Output IR to <git root>/examples/stubs/out/biguint_BigUIntContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.stubs.biguint.BigUIntContract.approval_program
debug: Sequentializing parallel copies in examples.stubs.biguint.compare_biguints
debug: Sequentializing parallel copies in examples.stubs.biguint.compare_biguint_vs_uint64
debug: Sequentializing parallel copies in examples.stubs.biguint.compare_uint64_vs_biguint
debug: Sequentializing parallel copies in examples.stubs.biguint.BigUIntContract.clear_state_program
debug: Output IR to <git root>/examples/stubs/out/biguint_BigUIntContract.parallel_copies.ir
debug: Coalescing local variables in examples.stubs.biguint.BigUIntContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.stubs.biguint.compare_biguints using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.stubs.biguint.compare_biguint_vs_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.stubs.biguint.compare_uint64_vs_biguint using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.stubs.biguint.BigUIntContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/stubs/out/biguint_BigUIntContract.final.ir
debug: Inserted compare_biguints_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[5]: 'load tmp%0#0 from scratch' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[12]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[17]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[19]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[24]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[26]: 'load tmp%3#0 from scratch' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[31]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[33]: 'load tmp%4#0 from scratch' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[38]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[40]: 'load tmp%5#0 from scratch' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[8]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[18]: 'load tmp%3#0 from scratch' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[23]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[25]: 'load tmp%4#0 from scratch' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[33]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[35]: 'load tmp%6#0 from scratch' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[43]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[45]: 'load tmp%8#0 from scratch' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[53]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[55]: 'load tmp%10#0 from scratch' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[5]: 'load tmp%0#0 from scratch' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[13]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[16]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[31]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[34]: 'load tmp%5#0 from scratch' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[42]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[45]: 'load tmp%7#0 from scratch' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[53]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[56]: 'load tmp%9#0 from scratch' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[8]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[18]: 'load tmp%3#0 from scratch' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[28]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[30]: 'load tmp%6#0 from scratch' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[38]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[40]: 'load tmp%8#0 from scratch' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[48]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[50]: 'load tmp%10#0 from scratch' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[5]: 'load tmp%0#0 from scratch' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[13]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[16]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[26]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[29]: 'load tmp%5#0 from scratch' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[37]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[40]: 'load tmp%7#0 from scratch' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[48]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[51]: 'load tmp%9#0 from scratch' with 'load tmp%9#0 from l-stack (no copy)'
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.ssa.ir
info: Optimizing examples.stubs.bytes.BytesContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded len("1234567") to 7
debug: Folded len("1234567") to 7
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable base_64#0
debug: Removing unused variable base_32#0
debug: Removing unused variable base_16#0
debug: Removing unused variable empty#0
debug: Removing unused variable c#0
debug: Removing unused variable abc#0
debug: Removing unused variable base_length%34#0
debug: Removing unused variable tmp%35#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable c#2
debug: Removing unused variable d#0
debug: Removing unused variable y#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded len(QmFzZSA2NCBlbmNvZGVk) to 15
debug: Folded len("") to 0
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded 7 - 1 to 6
debug: Folded len("1") to 1
debug: Folded len("1") to 1
debug: Folded len("1") to 1
debug: Folded len("") to 0
debug: Folded len("") to 0
debug: Folded len("1") to 1
debug: Folded len("1") to 1
debug: Folded len("") to 0
debug: Folded len("") to 0
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable base_length%17#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable base_length%22#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable base_length%27#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable tmp%41#0
debug: Removing unused variable tmp%44#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable tmp%50#0
debug: Removing unused variable tmp%53#0
debug: Removing unused variable tmp%56#0
debug: Removing unused variable tmp%59#0
debug: Removing unused variable tmp%62#0
debug: Optimizer: Simplify Conditional Branches
debug: ConditionalBranch goto 1u ? block@2 : block@1 simplified to goto block@2
debug: ConditionalBranch goto 1u ? block@5 : block@4 simplified to goto block@5
debug: ConditionalBranch goto 1u ? block@8 : block@7 simplified to goto block@8
debug: ConditionalBranch goto 0u ? block@11 : block@10 simplified to goto block@10
debug: ConditionalBranch goto 0u ? block@14 : block@13 simplified to goto block@13
debug: ConditionalBranch goto 1u ? block@16 : block@17 simplified to goto block@16
debug: ConditionalBranch goto 1u ? block@19 : block@20 simplified to goto block@19
debug: ConditionalBranch goto 0u ? block@22 : block@23 simplified to goto block@23
debug: ConditionalBranch goto 0u ? block@25 : block@26 simplified to goto block@26
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // ternary_false_L38 with block@0: // L5 in block@3: // ternary_merge_L38
debug: Merged linear block@2: // ternary_false_L38 into block@0: // L5
debug: Replaced predecessor block@5: // ternary_false_L41 with block@3: // ternary_merge_L38 in block@6: // ternary_merge_L41
debug: Merged linear block@5: // ternary_false_L41 into block@3: // ternary_merge_L38
debug: Replaced predecessor block@8: // ternary_false_L42 with block@6: // ternary_merge_L41 in block@9: // ternary_merge_L42
debug: Merged linear block@8: // ternary_false_L42 into block@6: // ternary_merge_L41
debug: Replaced predecessor block@10: // ternary_true_L43 with block@9: // ternary_merge_L42 in block@12: // ternary_merge_L43
debug: Merged linear block@10: // ternary_true_L43 into block@9: // ternary_merge_L42
debug: Replaced predecessor block@13: // ternary_true_L44 with block@12: // ternary_merge_L43 in block@15: // ternary_merge_L44
debug: Merged linear block@13: // ternary_true_L44 into block@12: // ternary_merge_L43
debug: Replaced predecessor block@16: // ternary_true_L45 with block@15: // ternary_merge_L44 in block@18: // ternary_merge_L45
debug: Merged linear block@16: // ternary_true_L45 into block@15: // ternary_merge_L44
debug: Replaced predecessor block@19: // ternary_true_L46 with block@18: // ternary_merge_L45 in block@21: // ternary_merge_L46
debug: Merged linear block@19: // ternary_true_L46 into block@18: // ternary_merge_L45
debug: Replaced predecessor block@23: // ternary_false_L47 with block@21: // ternary_merge_L46 in block@24: // ternary_merge_L47
debug: Merged linear block@23: // ternary_false_L47 into block@21: // ternary_merge_L46
debug: Replaced predecessor block@26: // ternary_false_L48 with block@24: // ternary_merge_L47 in block@27: // ternary_merge_L48
debug: Merged linear block@26: // ternary_false_L48 into block@24: // ternary_merge_L47
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1: // ternary_true_L38, block@4: // ternary_true_L41, block@7: // ternary_true_L42, block@11: // ternary_false_L43, block@14: // ternary_false_L44, block@17: // ternary_false_L45, block@20: // ternary_false_L46, block@22: // ternary_true_L47, block@25: // ternary_true_L48
debug: Removed unreachable predecessors from block@3: // ternary_merge_L38
debug: Removed unreachable predecessors from block@6: // ternary_merge_L41
debug: Removed unreachable predecessors from block@9: // ternary_merge_L42
debug: Removed unreachable predecessors from block@12: // ternary_merge_L43
debug: Removed unreachable predecessors from block@15: // ternary_merge_L44
debug: Removed unreachable predecessors from block@18: // ternary_merge_L45
debug: Removed unreachable predecessors from block@21: // ternary_merge_L46
debug: Removed unreachable predecessors from block@24: // ternary_merge_L47
debug: Removed unreachable predecessors from block@27: // ternary_merge_L48
debug: Found ternary_result%40#0, ternary_result%42#0, ternary_result%45#0, ternary_result%48#1, ternary_result%51#1, ternary_result%54#1, ternary_result%57#1, ternary_result%60#0, ternary_result%63#0 to remove from Phi nodes
debug: Replacing trivial Phi node: let ternary_result%40#2: bytes = φ(ternary_result%40#1 <- block@0) (ternary_result%40#2) with ternary_result%40#1
debug: Deleting Phi assignment: let ternary_result%40#2: bytes = φ(ternary_result%40#1 <- block@0)
debug: Replacing trivial Phi node: let ternary_result%42#2: bytes = φ(ternary_result%42#1 <- block@3) (ternary_result%42#2) with ternary_result%42#1
debug: Deleting Phi assignment: let ternary_result%42#2: bytes = φ(ternary_result%42#1 <- block@3)
debug: Replacing trivial Phi node: let ternary_result%45#2: bytes = φ(ternary_result%45#1 <- block@6) (ternary_result%45#2) with ternary_result%45#1
debug: Deleting Phi assignment: let ternary_result%45#2: bytes = φ(ternary_result%45#1 <- block@6)
debug: Replacing trivial Phi node: let ternary_result%48#2: bytes = φ(ternary_result%48#0 <- block@9) (ternary_result%48#2) with ternary_result%48#0
debug: Deleting Phi assignment: let ternary_result%48#2: bytes = φ(ternary_result%48#0 <- block@9)
debug: Replacing trivial Phi node: let ternary_result%51#2: bytes = φ(ternary_result%51#0 <- block@12) (ternary_result%51#2) with ternary_result%51#0
debug: Deleting Phi assignment: let ternary_result%51#2: bytes = φ(ternary_result%51#0 <- block@12)
debug: Replacing trivial Phi node: let ternary_result%54#2: bytes = φ(ternary_result%54#0 <- block@15) (ternary_result%54#2) with ternary_result%54#0
debug: Deleting Phi assignment: let ternary_result%54#2: bytes = φ(ternary_result%54#0 <- block@15)
debug: Replacing trivial Phi node: let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@18) (ternary_result%57#2) with ternary_result%57#0
debug: Deleting Phi assignment: let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@18)
debug: Replacing trivial Phi node: let ternary_result%60#2: bytes = φ(ternary_result%60#1 <- block@21) (ternary_result%60#2) with ternary_result%60#1
debug: Deleting Phi assignment: let ternary_result%60#2: bytes = φ(ternary_result%60#1 <- block@21)
debug: Replacing trivial Phi node: let ternary_result%63#2: bytes = φ(ternary_result%63#1 <- block@24) (ternary_result%63#2) with ternary_result%63#1
debug: Deleting Phi assignment: let ternary_result%63#2: bytes = φ(ternary_result%63#1 <- block@24)
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded !0 to 1u
debug: Folded 3 - 1 to 2
debug: Folded 3 - 2 to 1
debug: Folded 3 - 2 to 1
debug: Folded 3 - 1 to 2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%31#0
debug: Removing unused variable ternary_result%40#1
debug: Removing unused variable ternary_result%42#1
debug: Removing unused variable ternary_result%45#1
debug: Removing unused variable ternary_result%48#0
debug: Removing unused variable ternary_result%51#0
debug: Removing unused variable ternary_result%54#0
debug: Removing unused variable ternary_result%57#0
debug: Removing unused variable ternary_result%60#1
debug: Removing unused variable ternary_result%63#1
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L38 with block@0: // L5 in block@6: // ternary_merge_L41
debug: Merged linear block@3: // ternary_merge_L38 into block@0: // L5
debug: Replaced predecessor block@6: // ternary_merge_L41 with block@0: // L5 in block@9: // ternary_merge_L42
debug: Merged linear block@6: // ternary_merge_L41 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L42 with block@0: // L5 in block@12: // ternary_merge_L43
debug: Merged linear block@9: // ternary_merge_L42 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L43 with block@0: // L5 in block@15: // ternary_merge_L44
debug: Merged linear block@12: // ternary_merge_L43 into block@0: // L5
debug: Replaced predecessor block@15: // ternary_merge_L44 with block@0: // L5 in block@18: // ternary_merge_L45
debug: Merged linear block@15: // ternary_merge_L44 into block@0: // L5
debug: Replaced predecessor block@18: // ternary_merge_L45 with block@0: // L5 in block@21: // ternary_merge_L46
debug: Merged linear block@18: // ternary_merge_L45 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L46 with block@0: // L5 in block@24: // ternary_merge_L47
debug: Merged linear block@21: // ternary_merge_L46 into block@0: // L5
debug: Replaced predecessor block@24: // ternary_merge_L47 with block@0: // L5 in block@27: // ternary_merge_L48
debug: Merged linear block@24: // ternary_merge_L47 into block@0: // L5
debug: Merged linear block@27: // ternary_merge_L48 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 4, ending loop
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.cssa.ir
debug: Removing Phis from examples.stubs.bytes.BytesContract.approval_program
debug: Removing Phis from examples.stubs.bytes.BytesContract.clear_state_program
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.stubs.bytes.BytesContract.approval_program
debug: Sequentializing parallel copies in examples.stubs.bytes.BytesContract.clear_state_program
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.parallel_copies.ir
debug: Coalescing local variables in examples.stubs.bytes.BytesContract.approval_program using strategy RootOperandGrouping
debug: Coalescing y#1 with [y#2, y#3]
debug: Coalescing resulted in 5 replacement/s
debug: Coalescing local variables in examples.stubs.bytes.BytesContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/stubs/out/bytes_BytesContract.final.ir
debug: Inserted main_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load tmp%0#0 from scratch' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[12]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[17]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[19]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[28]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[30]: 'load tmp%6#0 from scratch' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[33]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[35]: 'load tmp%7#0 from scratch' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[40]: 'store c#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[42]: 'load c#1 from scratch' with 'load c#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[45]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[47]: 'load tmp%8#0 from scratch' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[51]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[53]: 'load tmp%9#0 from scratch' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[56]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[58]: 'load tmp%10#0 from scratch' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[62]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[64]: 'load tmp%11#0 from scratch' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[67]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[69]: 'load tmp%12#0 from scratch' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[73]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[75]: 'load tmp%13#0 from scratch' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[78]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[80]: 'load tmp%14#0 from scratch' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[84]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[86]: 'load tmp%15#0 from scratch' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[89]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[91]: 'load tmp%16#0 from scratch' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[97]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[99]: 'load tmp%20#0 from scratch' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[102]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[104]: 'load tmp%21#0 from scratch' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[110]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[112]: 'load tmp%25#0 from scratch' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[115]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[117]: 'load tmp%26#0 from scratch' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[123]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[125]: 'load tmp%32#0 from scratch' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[128]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[130]: 'load tmp%33#0 from scratch' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[136]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[138]: 'load tmp%37#0 from scratch' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[141]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[143]: 'load tmp%38#0 from scratch' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[148]: 'store x#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[150]: 'load x#0 from scratch' with 'load x#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[155]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[157]: 'load tmp%43#0 from scratch' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[162]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[164]: 'load tmp%46#0 from scratch' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[169]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[171]: 'load tmp%49#0 from scratch' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[176]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[178]: 'load tmp%52#0 from scratch' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[183]: 'store tmp%55#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[185]: 'load tmp%55#0 from scratch' with 'load tmp%55#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[190]: 'store tmp%58#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[192]: 'load tmp%58#0 from scratch' with 'load tmp%58#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[197]: 'store tmp%61#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[199]: 'load tmp%61#0 from scratch' with 'load tmp%61#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[204]: 'store tmp%64#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[206]: 'load tmp%64#0 from scratch' with 'load tmp%64#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[211]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[213]: 'load tmp%65#0 from scratch' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[216]: 'store tmp%66#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[218]: 'load tmp%66#0 from scratch' with 'load tmp%66#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[223]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[225]: 'load tmp%67#0 from scratch' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[228]: 'store tmp%68#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[230]: 'load tmp%68#0 from scratch' with 'load tmp%68#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[235]: 'store tmp%69#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[237]: 'load tmp%69#0 from scratch' with 'load tmp%69#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[240]: 'store tmp%70#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[242]: 'load tmp%70#0 from scratch' with 'load tmp%70#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[247]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[249]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[252]: 'store tmp%71#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[254]: 'load tmp%71#0 from scratch' with 'load tmp%71#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[259]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[261]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[264]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[266]: 'load tmp%72#0 from scratch' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[271]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[273]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[276]: 'store tmp%73#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[278]: 'load tmp%73#0 from scratch' with 'load tmp%73#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[250]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[257]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[263]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[270]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.ssa.ir
info: Optimizing examples.stubs.uint64.Uint64Contract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable zero#0
debug: Removing unused variable one#0
debug: Removing unused variable two#0
debug: Removing unused variable five#0
debug: Removing unused variable three#0
debug: Removing unused variable sixty#0
debug: Removing unused variable c#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable y#0
debug: Optimizer: Simplify Conditional Branches
debug: ConditionalBranch goto 1u ? block@2 : block@1 simplified to goto block@2
debug: ConditionalBranch goto 1u ? block@5 : block@4 simplified to goto block@5
debug: ConditionalBranch goto 0u ? block@8 : block@7 simplified to goto block@7
debug: ConditionalBranch goto 0u ? block@11 : block@10 simplified to goto block@10
debug: ConditionalBranch goto 1u ? block@13 : block@14 simplified to goto block@13
debug: ConditionalBranch goto 1u ? block@16 : block@17 simplified to goto block@16
debug: ConditionalBranch goto 0u ? block@19 : block@20 simplified to goto block@20
debug: ConditionalBranch goto 0u ? block@22 : block@23 simplified to goto block@23
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // ternary_false_L55 with block@0: // L5 in block@3: // ternary_merge_L55
debug: Merged linear block@2: // ternary_false_L55 into block@0: // L5
debug: Replaced predecessor block@5: // ternary_false_L56 with block@3: // ternary_merge_L55 in block@6: // ternary_merge_L56
debug: Merged linear block@5: // ternary_false_L56 into block@3: // ternary_merge_L55
debug: Replaced predecessor block@7: // ternary_true_L57 with block@6: // ternary_merge_L56 in block@9: // ternary_merge_L57
debug: Merged linear block@7: // ternary_true_L57 into block@6: // ternary_merge_L56
debug: Replaced predecessor block@10: // ternary_true_L58 with block@9: // ternary_merge_L57 in block@12: // ternary_merge_L58
debug: Merged linear block@10: // ternary_true_L58 into block@9: // ternary_merge_L57
debug: Replaced predecessor block@13: // ternary_true_L59 with block@12: // ternary_merge_L58 in block@15: // ternary_merge_L59
debug: Merged linear block@13: // ternary_true_L59 into block@12: // ternary_merge_L58
debug: Replaced predecessor block@16: // ternary_true_L60 with block@15: // ternary_merge_L59 in block@18: // ternary_merge_L60
debug: Merged linear block@16: // ternary_true_L60 into block@15: // ternary_merge_L59
debug: Replaced predecessor block@20: // ternary_false_L61 with block@18: // ternary_merge_L60 in block@21: // ternary_merge_L61
debug: Merged linear block@20: // ternary_false_L61 into block@18: // ternary_merge_L60
debug: Replaced predecessor block@23: // ternary_false_L62 with block@21: // ternary_merge_L61 in block@24: // ternary_merge_L62
debug: Merged linear block@23: // ternary_false_L62 into block@21: // ternary_merge_L61
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1: // ternary_true_L55, block@4: // ternary_true_L56, block@8: // ternary_false_L57, block@11: // ternary_false_L58, block@14: // ternary_false_L59, block@17: // ternary_false_L60, block@19: // ternary_true_L61, block@22: // ternary_true_L62
debug: Removed unreachable predecessors from block@3: // ternary_merge_L55
debug: Removed unreachable predecessors from block@6: // ternary_merge_L56
debug: Removed unreachable predecessors from block@9: // ternary_merge_L57
debug: Removed unreachable predecessors from block@12: // ternary_merge_L58
debug: Removed unreachable predecessors from block@15: // ternary_merge_L59
debug: Removed unreachable predecessors from block@18: // ternary_merge_L60
debug: Removed unreachable predecessors from block@21: // ternary_merge_L61
debug: Removed unreachable predecessors from block@24: // ternary_merge_L62
debug: Found ternary_result%27#0, ternary_result%29#0, ternary_result%31#1, ternary_result%33#1, ternary_result%35#1, ternary_result%37#1, ternary_result%39#0, ternary_result%41#0 to remove from Phi nodes
debug: Replacing trivial Phi node: let ternary_result%27#2: uint64 = φ(ternary_result%27#1 <- block@0) (ternary_result%27#2) with ternary_result%27#1
debug: Deleting Phi assignment: let ternary_result%27#2: uint64 = φ(ternary_result%27#1 <- block@0)
debug: Replacing trivial Phi node: let ternary_result%29#2: uint64 = φ(ternary_result%29#1 <- block@3) (ternary_result%29#2) with ternary_result%29#1
debug: Deleting Phi assignment: let ternary_result%29#2: uint64 = φ(ternary_result%29#1 <- block@3)
debug: Replacing trivial Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@6) (ternary_result%31#2) with ternary_result%31#0
debug: Deleting Phi assignment: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@6)
debug: Replacing trivial Phi node: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@9) (ternary_result%33#2) with ternary_result%33#0
debug: Deleting Phi assignment: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@9)
debug: Replacing trivial Phi node: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@12) (ternary_result%35#2) with ternary_result%35#0
debug: Deleting Phi assignment: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@12)
debug: Replacing trivial Phi node: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@15) (ternary_result%37#2) with ternary_result%37#0
debug: Deleting Phi assignment: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@15)
debug: Replacing trivial Phi node: let ternary_result%39#2: uint64 = φ(ternary_result%39#1 <- block@18) (ternary_result%39#2) with ternary_result%39#1
debug: Deleting Phi assignment: let ternary_result%39#2: uint64 = φ(ternary_result%39#1 <- block@18)
debug: Replacing trivial Phi node: let ternary_result%41#2: uint64 = φ(ternary_result%41#1 <- block@21) (ternary_result%41#2) with ternary_result%41#1
debug: Deleting Phi assignment: let ternary_result%41#2: uint64 = φ(ternary_result%41#1 <- block@21)
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded !0 to 1u
debug: Folded 1 < 5 to 1
debug: Folded 5 > 1 to 1
debug: Folded 1 + 5 to 6
debug: Folded 5 + 60 to 65
debug: Folded 60 - 5 to 55
debug: Folded 60 / 5 to 12
debug: Folded 5 * 60 to 300
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable c#1
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable ternary_result%27#1
debug: Removing unused variable ternary_result%29#1
debug: Removing unused variable ternary_result%31#0
debug: Removing unused variable ternary_result%33#0
debug: Removing unused variable ternary_result%35#0
debug: Removing unused variable ternary_result%37#0
debug: Removing unused variable ternary_result%39#1
debug: Removing unused variable ternary_result%41#1
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L55 with block@0: // L5 in block@6: // ternary_merge_L56
debug: Merged linear block@3: // ternary_merge_L55 into block@0: // L5
debug: Replaced predecessor block@6: // ternary_merge_L56 with block@0: // L5 in block@9: // ternary_merge_L57
debug: Merged linear block@6: // ternary_merge_L56 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L57 with block@0: // L5 in block@12: // ternary_merge_L58
debug: Merged linear block@9: // ternary_merge_L57 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L58 with block@0: // L5 in block@15: // ternary_merge_L59
debug: Merged linear block@12: // ternary_merge_L58 into block@0: // L5
debug: Replaced predecessor block@15: // ternary_merge_L59 with block@0: // L5 in block@18: // ternary_merge_L60
debug: Merged linear block@15: // ternary_merge_L59 into block@0: // L5
debug: Replaced predecessor block@18: // ternary_merge_L60 with block@0: // L5 in block@21: // ternary_merge_L61
debug: Merged linear block@18: // ternary_merge_L60 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L61 with block@0: // L5 in block@24: // ternary_merge_L62
debug: Merged linear block@21: // ternary_merge_L61 into block@0: // L5
debug: Merged linear block@24: // ternary_merge_L62 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 6 == 6 to 1
debug: Folded 65 == 65 to 1
debug: Folded 55 == 55 to 1
debug: Folded 65 - 5 to 60
debug: Folded 12 == 12 to 1
debug: Folded 300 == 300 to 1
debug: Folded 1 == 1 to 1
debug: Folded !0 to 1u
debug: Folded !0 to 1u
debug: Folded !0 to 1u
debug: Folded 1 == 1 to 1
debug: Folded 1 == 1 to 1
debug: Folded 1 == 1 to 1
debug: Folded !0 to 1u
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable c#2
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%40#0
debug: Removing unused variable tmp%42#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 60 == 60 to 1
debug: Folded 60 / 5 to 12
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%10#0
debug: Removing unused variable c#3
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 12 == 12 to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%13#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 6, ending loop
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.cssa.ir
debug: Removing Phis from examples.stubs.uint64.Uint64Contract.approval_program
debug: Removing Phis from examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.post_ssa.ir
debug: Sequentializing parallel copies in examples.stubs.uint64.Uint64Contract.approval_program
debug: Sequentializing parallel copies in examples.stubs.uint64.Uint64Contract.clear_state_program
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.parallel_copies.ir
debug: Coalescing local variables in examples.stubs.uint64.Uint64Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing c#4 with [c#5, c#6]
debug: Coalescing y#1 with [y#2, y#3]
debug: Coalescing resulted in 10 replacement/s
debug: Coalescing local variables in examples.stubs.uint64.Uint64Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/stubs/out/uint64_Uint64Contract.final.ir
debug: Inserted main_block@0.ops[11]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[13]: 'load tmp%3#0 from scratch' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[18]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[20]: 'load tmp%4#0 from scratch' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[39]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[41]: 'load tmp%16#0 from scratch' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[44]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[46]: 'load tmp%17#0 from scratch' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[51]: 'store c#4 to l-stack (copy)'
debug: Replaced main_block@0.ops[53]: 'load c#4 from scratch' with 'load c#4 from l-stack (no copy)'
debug: Inserted main_block@0.ops[56]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[58]: 'load tmp%18#0 from scratch' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[63]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[65]: 'load tmp%19#0 from scratch' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[68]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[70]: 'load tmp%20#0 from scratch' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[75]: 'store c#4 to l-stack (copy)'
debug: Replaced main_block@0.ops[77]: 'load c#4 from scratch' with 'load c#4 from l-stack (no copy)'
debug: Inserted main_block@0.ops[80]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[82]: 'load tmp%21#0 from scratch' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[87]: 'store c#4 to l-stack (copy)'
debug: Replaced main_block@0.ops[89]: 'load c#4 from scratch' with 'load c#4 from l-stack (no copy)'
debug: Inserted main_block@0.ops[92]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[94]: 'load tmp%22#0 from scratch' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[99]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[101]: 'load tmp%23#0 from scratch' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[103]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[105]: 'load tmp%24#0 from scratch' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[109]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[111]: 'load tmp%25#0 from scratch' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[114]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[116]: 'load tmp%26#0 from scratch' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[137]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[139]: 'load tmp%43#0 from scratch' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[142]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[144]: 'load tmp%44#0 from scratch' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[149]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[151]: 'load tmp%45#0 from scratch' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[154]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[156]: 'load tmp%46#0 from scratch' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[161]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[163]: 'load tmp%47#0 from scratch' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[166]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[168]: 'load tmp%48#0 from scratch' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[173]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[175]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[178]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[180]: 'load tmp%49#0 from scratch' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[185]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[187]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[190]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[192]: 'load tmp%50#0 from scratch' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[197]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[199]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[202]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[204]: 'load tmp%51#0 from scratch' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[78]: 'store c#4 to l-stack (copy)'
debug: Replaced main_block@0.ops[85]: 'load c#4 from scratch' with 'load c#4 from l-stack (no copy)'
debug: Inserted main_block@0.ops[177]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[184]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[190]: 'store y#1 to l-stack (copy)'
debug: Replaced main_block@0.ops[197]: 'load y#1 from scratch' with 'load y#1 from l-stack (no copy)'
debug: Inserted main_block@0.ops[54]: 'store c#4 to l-stack (copy)'
debug: Replaced main_block@0.ops[73]: 'load c#4 from scratch' with 'load c#4 from l-stack (no copy)'
info: Writing <git root>/examples/stubs/out/biguint.approval.teal
info: Writing <git root>/examples/stubs/out/biguint.approval.debug.teal
info: Writing <git root>/examples/stubs/out/biguint.clear.teal
info: Writing <git root>/examples/stubs/out/biguint.clear.debug.teal
info: Writing <git root>/examples/stubs/out/bytes.approval.teal
info: Writing <git root>/examples/stubs/out/bytes.approval.debug.teal
info: Writing <git root>/examples/stubs/out/bytes.clear.teal
info: Writing <git root>/examples/stubs/out/bytes.clear.debug.teal
info: Writing <git root>/examples/stubs/out/uint64.approval.teal
info: Writing <git root>/examples/stubs/out/uint64.approval.debug.teal
info: Writing <git root>/examples/stubs/out/uint64.clear.teal
info: Writing <git root>/examples/stubs/out/uint64.clear.debug.teal
>> exit code = 0