contract examples.stubs.bytes.BytesContract:
    program approval:
        subroutine examples.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: uint64 = (== QmFzZSA2NCBlbmNvZGVk "Base 64 encoded")
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (== IJQXGZJAGMZCAZLOMNXWIZLE "Base 32 encoded")
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (== 0x4261736520313620656e636f646564 "Base 16 encoded")
                (assert tmp%2#0)
                (assert 15u) // Non empty bytes should be Truthy
                (assert 1u) // Empty bytes should be Falsy
                let tmp%6#0: bytes = (concat "a" "b")
                let tmp%7#0: uint64 = (== tmp%6#0 "ab")
                (assert tmp%7#0)
                let c#1: bytes = (concat "c" "d")
                let tmp%8#0: uint64 = (== c#1 "cd")
                (assert tmp%8#0)
                let tmp%9#0: bytes = ((extract 0 1) "abc")
                let tmp%10#0: uint64 = (== tmp%9#0 "a")
                (assert tmp%10#0)
                let tmp%11#0: bytes = ((extract 1 0) "abc")
                let tmp%12#0: uint64 = (== tmp%11#0 "bc")
                (assert tmp%12#0)
                let tmp%13#0: bytes = ((substring 1 1) "abc")
                let tmp%14#0: uint64 = (== tmp%13#0 "")
                (assert tmp%14#0)
                let tmp%15#0: bytes = ((extract 0 1) "abc")
                let tmp%16#0: uint64 = (== tmp%15#0 "a")
                (assert tmp%16#0)
                let tmp%20#0: bytes = (substring3 "abc" 0u 2u)
                let tmp%21#0: uint64 = (== tmp%20#0 "ab")
                (assert tmp%21#0)
                let tmp%25#0: bytes = (substring3 "abc" 1u 3u)
                let tmp%26#0: uint64 = (== tmp%25#0 "bc")
                (assert tmp%26#0)
                let tmp%32#0: bytes = (substring3 "abc" 1u 2u)
                let tmp%33#0: uint64 = (== tmp%32#0 "b")
                (assert tmp%33#0)
                let tmp%37#0: bytes = (substring3 "1234567" 1u 6u)
                let tmp%38#0: uint64 = (== tmp%37#0 "23456")
                (assert tmp%38#0)
                let x#0: uint64 = (== "1" "1")
                (assert x#0)
                let tmp%43#0: uint64 = (== "1" "1")
                (assert tmp%43#0)
                let tmp%46#0: uint64 = (== "" "")
                (assert tmp%46#0)
                let tmp%49#0: uint64 = (== "" "")
                (assert tmp%49#0)
                let tmp%52#0: uint64 = (== "" "")
                (assert tmp%52#0)
                let tmp%55#0: uint64 = (== "1" "1")
                (assert tmp%55#0)
                let tmp%58#0: uint64 = (== "1" "1")
                (assert tmp%58#0)
                let tmp%61#0: uint64 = (== "1" "1")
                (assert tmp%61#0)
                let tmp%64#0: uint64 = (== "" "")
                (assert tmp%64#0)
                let tmp%65#0: bytes = (b& 0x00 0x0f)
                let tmp%66#0: uint64 = (== tmp%65#0 0x00)
                (assert tmp%66#0)
                let tmp%67#0: bytes = (b| 0x0f 0xf0)
                let tmp%68#0: uint64 = (== tmp%67#0 0xff)
                (assert tmp%68#0)
                let tmp%69#0: bytes = (b^ 0x0f 0xff)
                let tmp%70#0: uint64 = (== tmp%69#0 0xf0)
                (assert tmp%70#0)
                let y#1: bytes = (b& 0x00 0xff)
                let tmp%71#0: uint64 = (== y#1 0x00)
                (assert tmp%71#0)
                let y#1: bytes = (b| y#1 0xff)
                let tmp%72#0: uint64 = (== y#1 0xff)
                (assert tmp%72#0)
                let y#1: bytes = (b^ y#1 0xf0)
                let tmp%73#0: uint64 = (== y#1 0x0f)
                (assert tmp%73#0)
                return 1u
    
    program clear-state:
        subroutine examples.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L71
                return 1u