contract examples.stubs.uint64.Uint64Contract:
    program approval:
        subroutine examples.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                (assert 1u) // Any non-zero number should be Truthy
                (assert 1u) // Zero should beFalsy
                (assert 1u)
                (assert 1u)
                let tmp%3#0: uint64 = (<= 1u 1u)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (>= 5u 5u)
                (assert tmp%4#0)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                let tmp%10#0: uint64 = (== 60u 60u)
                (assert tmp%10#0)
                (assert 1u)
                let c#3: uint64 = (/ 60u 5u)
                let tmp%13#0: uint64 = (== c#3 12u)
                (assert tmp%13#0)
                (assert 1u)
                let tmp%16#0: uint64 = (exp 5u 3u)
                let tmp%17#0: uint64 = (== tmp%16#0 125u)
                (assert tmp%17#0)
                let c#4: uint64 = (exp c#3 2u)
                let tmp%18#0: uint64 = (== c#4 144u)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (shl 1u 2u)
                let tmp%20#0: uint64 = (== tmp%19#0 4u)
                (assert tmp%20#0)
                let c#5: uint64 = (shr c#4 6u)
                let tmp%21#0: uint64 = (== c#5 2u)
                (assert tmp%21#0)
                let c#6: uint64 = (shl c#5 6u)
                let tmp%22#0: uint64 = (== c#6 128u)
                (assert tmp%22#0)
                let tmp%23#0: uint64 = (shr 5u 3u)
                let tmp%24#0: uint64 = (! tmp%23#0)
                (assert tmp%24#0)
                let tmp%25#0: uint64 = (~ 1u)
                let tmp%26#0: uint64 = (== tmp%25#0 18446744073709551614u)
                (assert tmp%26#0)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                (assert 1u)
                let tmp%43#0: uint64 = (& 1u 5u)
                let tmp%44#0: uint64 = (== tmp%43#0 1u)
                (assert tmp%44#0)
                let tmp%45#0: uint64 = (| 60u 5u)
                let tmp%46#0: uint64 = (== tmp%45#0 61u)
                (assert tmp%46#0)
                let tmp%47#0: uint64 = (^ 60u 5u)
                let tmp%48#0: uint64 = (== tmp%47#0 57u)
                (assert tmp%48#0)
                let y#1: uint64 = (& 254u 31u)
                let tmp%49#0: uint64 = (== y#1 30u)
                (assert tmp%49#0)
                let y#2: uint64 = (| y#1 54u)
                let tmp%50#0: uint64 = (== y#2 62u)
                (assert tmp%50#0)
                let y#3: uint64 = (^ y#2 255u)
                let tmp%51#0: uint64 = (== y#3 193u)
                (assert tmp%51#0)
                return 1u
    
    program clear-state:
        subroutine examples.stubs.uint64.Uint64Contract.clear_state_program() -> uint64:
            block@0: // L78
                return 1u