contract examples.stubs.bytes.BytesContract:
    program approval:
        subroutine examples.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: uint64 = (== QmFzZSA2NCBlbmNvZGVk "Base 64 encoded")
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (== IJQXGZJAGMZCAZLOMNXWIZLE "Base 32 encoded")
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (== 0x4261736520313620656e636f646564 "Base 16 encoded")
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (len QmFzZSA2NCBlbmNvZGVk)
                (assert tmp%3#0) // Non empty bytes should be Truthy
                let tmp%4#0: uint64 = (len "")
                let tmp%5#0: uint64 = (! tmp%4#0)
                (assert tmp%5#0) // Empty bytes should be Falsy
                let tmp%6#0: bytes = (concat "a" "b")
                let tmp%7#0: uint64 = (== tmp%6#0 "ab")
                (assert tmp%7#0)
                let c#1: bytes = (concat "c" "d")
                let tmp%8#0: uint64 = (== c#1 "cd")
                (assert tmp%8#0)
                let tmp%9#0: bytes = ((extract 0 1) "abc")
                let tmp%10#0: uint64 = (== tmp%9#0 "a")
                (assert tmp%10#0)
                let tmp%11#0: bytes = ((extract 1 0) "abc")
                let tmp%12#0: uint64 = (== tmp%11#0 "bc")
                (assert tmp%12#0)
                let tmp%13#0: bytes = ((substring 1 1) "abc")
                let tmp%14#0: uint64 = (== tmp%13#0 "")
                (assert tmp%14#0)
                let tmp%15#0: bytes = ((extract 0 1) "abc")
                let tmp%16#0: uint64 = (== tmp%15#0 "a")
                (assert tmp%16#0)
                let base_length%17#0: uint64 = (len "abc")
                let tmp%18#0: uint64 = (len "abc")
                let tmp%19#0: uint64 = (- tmp%18#0 1u)
                let tmp%20#0: bytes = (substring3 "abc" 0u tmp%19#0)
                let tmp%21#0: uint64 = (== tmp%20#0 "ab")
                (assert tmp%21#0)
                let base_length%22#0: uint64 = (len "abc")
                let tmp%23#0: uint64 = (len "abc")
                let tmp%24#0: uint64 = (- tmp%23#0 2u)
                let tmp%25#0: bytes = (substring3 "abc" tmp%24#0 base_length%22#0)
                let tmp%26#0: uint64 = (== tmp%25#0 "bc")
                (assert tmp%26#0)
                let base_length%27#0: uint64 = (len "abc")
                let tmp%28#0: uint64 = (len "abc")
                let tmp%29#0: uint64 = (- tmp%28#0 2u)
                let tmp%30#0: uint64 = (len "abc")
                let tmp%31#0: uint64 = (- tmp%30#0 1u)
                let tmp%32#0: bytes = (substring3 "abc" tmp%29#0 tmp%31#0)
                let tmp%33#0: uint64 = (== tmp%32#0 "b")
                (assert tmp%33#0)
                let tmp%36#0: uint64 = (- 7u 1u)
                let tmp%37#0: bytes = (substring3 "1234567" 1u tmp%36#0)
                let tmp%38#0: uint64 = (== tmp%37#0 "23456")
                (assert tmp%38#0)
                let tmp%39#0: uint64 = (len "1")
                goto tmp%39#0 ? block@2 : block@1
            block@1: // ternary_true_L38
                let ternary_result%40#0: bytes = "1"
                goto block@3
            block@2: // ternary_false_L38
                let ternary_result%40#1: bytes = "1"
                goto block@3
            block@3: // ternary_merge_L38
                let ternary_result%40#2: bytes = φ(ternary_result%40#0 <- block@1, ternary_result%40#1 <- block@2)
                let x#0: uint64 = (== ternary_result%40#2 "1")
                (assert x#0)
                let tmp%41#0: uint64 = (len "1")
                goto tmp%41#0 ? block@5 : block@4
            block@4: // ternary_true_L41
                let ternary_result%42#0: bytes = "1"
                goto block@6
            block@5: // ternary_false_L41
                let ternary_result%42#1: bytes = "1"
                goto block@6
            block@6: // ternary_merge_L41
                let ternary_result%42#2: bytes = φ(ternary_result%42#0 <- block@4, ternary_result%42#1 <- block@5)
                let tmp%43#0: uint64 = (== ternary_result%42#2 "1")
                (assert tmp%43#0)
                let tmp%44#0: uint64 = (len "1")
                goto tmp%44#0 ? block@8 : block@7
            block@7: // ternary_true_L42
                let ternary_result%45#0: bytes = "1"
                goto block@9
            block@8: // ternary_false_L42
                let ternary_result%45#1: bytes = ""
                goto block@9
            block@9: // ternary_merge_L42
                let ternary_result%45#2: bytes = φ(ternary_result%45#0 <- block@7, ternary_result%45#1 <- block@8)
                let tmp%46#0: uint64 = (== ternary_result%45#2 "")
                (assert tmp%46#0)
                let tmp%47#0: uint64 = (len "")
                goto tmp%47#0 ? block@11 : block@10
            block@10: // ternary_true_L43
                let ternary_result%48#0: bytes = ""
                goto block@12
            block@11: // ternary_false_L43
                let ternary_result%48#1: bytes = "1"
                goto block@12
            block@12: // ternary_merge_L43
                let ternary_result%48#2: bytes = φ(ternary_result%48#0 <- block@10, ternary_result%48#1 <- block@11)
                let tmp%49#0: uint64 = (== ternary_result%48#2 "")
                (assert tmp%49#0)
                let tmp%50#0: uint64 = (len "")
                goto tmp%50#0 ? block@14 : block@13
            block@13: // ternary_true_L44
                let ternary_result%51#0: bytes = ""
                goto block@15
            block@14: // ternary_false_L44
                let ternary_result%51#1: bytes = ""
                goto block@15
            block@15: // ternary_merge_L44
                let ternary_result%51#2: bytes = φ(ternary_result%51#0 <- block@13, ternary_result%51#1 <- block@14)
                let tmp%52#0: uint64 = (== ternary_result%51#2 "")
                (assert tmp%52#0)
                let tmp%53#0: uint64 = (len "1")
                goto tmp%53#0 ? block@16 : block@17
            block@16: // ternary_true_L45
                let ternary_result%54#0: bytes = "1"
                goto block@18
            block@17: // ternary_false_L45
                let ternary_result%54#1: bytes = "1"
                goto block@18
            block@18: // ternary_merge_L45
                let ternary_result%54#2: bytes = φ(ternary_result%54#0 <- block@16, ternary_result%54#1 <- block@17)
                let tmp%55#0: uint64 = (== ternary_result%54#2 "1")
                (assert tmp%55#0)
                let tmp%56#0: uint64 = (len "1")
                goto tmp%56#0 ? block@19 : block@20
            block@19: // ternary_true_L46
                let ternary_result%57#0: bytes = "1"
                goto block@21
            block@20: // ternary_false_L46
                let ternary_result%57#1: bytes = ""
                goto block@21
            block@21: // ternary_merge_L46
                let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@19, ternary_result%57#1 <- block@20)
                let tmp%58#0: uint64 = (== ternary_result%57#2 "1")
                (assert tmp%58#0)
                let tmp%59#0: uint64 = (len "")
                goto tmp%59#0 ? block@22 : block@23
            block@22: // ternary_true_L47
                let ternary_result%60#0: bytes = ""
                goto block@24
            block@23: // ternary_false_L47
                let ternary_result%60#1: bytes = "1"
                goto block@24
            block@24: // ternary_merge_L47
                let ternary_result%60#2: bytes = φ(ternary_result%60#0 <- block@22, ternary_result%60#1 <- block@23)
                let tmp%61#0: uint64 = (== ternary_result%60#2 "1")
                (assert tmp%61#0)
                let tmp%62#0: uint64 = (len "")
                goto tmp%62#0 ? block@25 : block@26
            block@25: // ternary_true_L48
                let ternary_result%63#0: bytes = ""
                goto block@27
            block@26: // ternary_false_L48
                let ternary_result%63#1: bytes = ""
                goto block@27
            block@27: // ternary_merge_L48
                let ternary_result%63#2: bytes = φ(ternary_result%63#0 <- block@25, ternary_result%63#1 <- block@26)
                let tmp%64#0: uint64 = (== ternary_result%63#2 "")
                (assert tmp%64#0)
                let tmp%65#0: bytes = (b& 0x00 0x0f)
                let tmp%66#0: uint64 = (== tmp%65#0 0x00)
                (assert tmp%66#0)
                let tmp%67#0: bytes = (b| 0x0f 0xf0)
                let tmp%68#0: uint64 = (== tmp%67#0 0xff)
                (assert tmp%68#0)
                let tmp%69#0: bytes = (b^ 0x0f 0xff)
                let tmp%70#0: uint64 = (== tmp%69#0 0xf0)
                (assert tmp%70#0)
                let y#1: bytes = (b& 0x00 0xff)
                let tmp%71#0: uint64 = (== y#1 0x00)
                (assert tmp%71#0)
                let y#2: bytes = (b| y#1 0xff)
                let tmp%72#0: uint64 = (== y#2 0xff)
                (assert tmp%72#0)
                let y#3: bytes = (b^ y#2 0xf0)
                let tmp%73#0: uint64 = (== y#3 0x0f)
                (assert tmp%73#0)
                return 1u
    
    program clear-state:
        subroutine examples.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L71
                return 1u