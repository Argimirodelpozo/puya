>> poetry run algopy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 string_ops
info: Building AWST for __init__.py
info: Building AWST for string_ops
info: Building AWST for string_ops/contract.py
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Looking for 'search_start%3' in an unsealed block creating an incomplete Phi: block@1: // substr_header_L21
debug: Created Phi assignment: let search_start%3#1: uint64 = undefined while trying to resolve 'search_start%3' in block@1: // substr_header_L21
debug: Looking for 'len_item%2' in an unsealed block creating an incomplete Phi: block@1: // substr_header_L21
debug: Created Phi assignment: let len_item%2#1: uint64 = undefined while trying to resolve 'len_item%2' in block@1: // substr_header_L21
debug: Terminated block@1: // substr_header_L21
debug: Sealing block@2: // substr_body_L21
debug: Terminated block@2: // substr_body_L21
debug: Looking for 'search_start%3' in an unsealed block creating an incomplete Phi: block@3: // substr_footer_L21
debug: Created Phi assignment: let search_start%3#2: uint64 = undefined while trying to resolve 'search_start%3' in block@3: // substr_footer_L21
debug: Terminated block@3: // substr_footer_L21
debug: Sealing block@3: // substr_footer_L21
debug: Added search_start%3#1 to Phi node: let search_start%3#2: uint64 = φ(search_start%3#1 <- block@2) in block@2: // substr_body_L21
debug: Replacing trivial Phi node: let search_start%3#2: uint64 = φ(search_start%3#1 <- block@2) (search_start%3#2) with search_start%3#1
debug: Deleting Phi assignment: let search_start%3#2: uint64 = φ(search_start%3#1 <- block@2)
debug: Replaced trivial Phi node: let search_start%3#2: uint64 = φ(search_start%3#1 <- block@2) (search_start%3#2) with search_start%3#1 in current definition for 0 blocks
debug: Sealing block@1: // substr_header_L21
debug: Added search_start%3#0 to Phi node: let search_start%3#1: uint64 = φ(search_start%3#0 <- block@0) in block@0: // L20
debug: Added search_start%3#3 to Phi node: let search_start%3#1: uint64 = φ(search_start%3#0 <- block@0, search_start%3#3 <- block@3) in block@3: // substr_footer_L21
debug: Added len_item%2#0 to Phi node: let len_item%2#1: uint64 = φ(len_item%2#0 <- block@0) in block@0: // L20
debug: Added len_item%2#1 to Phi node: let len_item%2#1: uint64 = φ(len_item%2#0 <- block@0, len_item%2#1 <- block@3) in block@3: // substr_footer_L21
debug: Replacing trivial Phi node: let len_item%2#1: uint64 = φ(len_item%2#0 <- block@0, len_item%2#1 <- block@3) (len_item%2#1) with len_item%2#0
debug: Deleting Phi assignment: let len_item%2#1: uint64 = φ(len_item%2#0 <- block@0, len_item%2#1 <- block@3)
debug: Replaced trivial Phi node: let len_item%2#1: uint64 = φ(len_item%2#0 <- block@0, len_item%2#1 <- block@3) (len_item%2#1) with len_item%2#0 in current definition for 3 blocks
debug: Sealing block@4: // substr_after_L21
debug: Created Phi assignment: let found%0#2: uint64 = undefined while trying to resolve 'found%0' in block@4: // substr_after_L21
debug: Created Phi assignment: let found%0#3: uint64 = undefined while trying to resolve 'found%0' in block@1: // substr_header_L21
debug: Added found%0#0 to Phi node: let found%0#3: uint64 = φ(found%0#0 <- block@0) in block@0: // L20
debug: Added found%0#1 to Phi node: let found%0#3: uint64 = φ(found%0#0 <- block@0, found%0#1 <- block@3) in block@3: // substr_footer_L21
debug: Added found%0#3 to Phi node: let found%0#2: uint64 = φ(found%0#3 <- block@1) in block@1: // substr_header_L21
debug: Added found%0#1 to Phi node: let found%0#2: uint64 = φ(found%0#3 <- block@1, found%0#1 <- block@2) in block@2: // substr_body_L21
debug: Terminated block@4: // substr_after_L21
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Output IR to <git root>/examples/string_ops/out/contract_MyContract.ssa.ir
info: Optimizing examples.string_ops.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.string_ops.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.string_ops.contract.is_in_str
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.string_ops.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 1, ending loop
debug: Output IR to <git root>/examples/string_ops/out/contract_MyContract.cssa.ir
debug: Removing Phis from examples.string_ops.contract.MyContract.approval_program
debug: Removing Phis from examples.string_ops.contract.is_in_str
debug: Removing Phis from examples.string_ops.contract.MyContract.clear_state_program
debug: Output IR to <git root>/examples/string_ops/out/contract_MyContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.string_ops.contract.MyContract.approval_program
debug: Sequentializing parallel copies in examples.string_ops.contract.is_in_str
debug: loc: {found%0#6=None, search_start%3#6=None, found%0#0=found%0#0, search_start%3#0=search_start%3#0}
debug: pred: {found%0#6=found%0#0, search_start%3#6=search_start%3#0}
debug: ready: found%0#6, search_start%3#6
debug: to_do: found%0#6, search_start%3#6
debug: * avail search_start%3#6
debug: * avail search_start%3#0
debug: * avail found%0#6
debug: * avail found%0#0
debug: * to_do search_start%3#6
debug: * to_do found%0#6
debug: loc: {found%0#3=None, search_start%3#1=None, found%0#6=found%0#6, search_start%3#6=search_start%3#6}
debug: pred: {found%0#3=found%0#6, search_start%3#1=search_start%3#6}
debug: ready: found%0#3, search_start%3#1
debug: to_do: found%0#3, search_start%3#1
debug: * avail search_start%3#1
debug: * avail search_start%3#6
debug: * avail found%0#3
debug: * avail found%0#6
debug: * to_do search_start%3#1
debug: * to_do found%0#3
debug: loc: {found%0#6=None, search_start%3#6=None, found%0#1=found%0#1, search_start%3#3=search_start%3#3}
debug: pred: {found%0#6=found%0#1, search_start%3#6=search_start%3#3}
debug: ready: found%0#6, search_start%3#6
debug: to_do: found%0#6, search_start%3#6
debug: * avail search_start%3#6
debug: * avail search_start%3#3
debug: * avail found%0#6
debug: * avail found%0#1
debug: * to_do search_start%3#6
debug: * to_do found%0#6
debug: Sequentializing parallel copies in examples.string_ops.contract.MyContract.clear_state_program
debug: Output IR to <git root>/examples/string_ops/out/contract_MyContract.parallel_copies.ir
debug: Coalescing local variables in examples.string_ops.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.string_ops.contract.is_in_str using strategy RootOperandGrouping
debug: Coalescing found%0#0 with [found%0#6, found%0#3, found%0#9, found%0#2]
debug: Coalescing search_start%3#0 with [search_start%3#6, search_start%3#1, search_start%3#3]
debug: Coalescing resulted in 19 replacement/s
debug: Coalescing local variables in examples.string_ops.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/string_ops/out/contract_MyContract.final.ir
debug: Inserted main_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load tmp%0#0 from scratch' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[12]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[14]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[16]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted is_in_str_substr_header@1.ops[3]: 'store search_end%4#0 to l-stack (copy)'
debug: Replaced is_in_str_substr_header@1.ops[5]: 'load search_end%4#0 from scratch' with 'load search_end%4#0 from l-stack (no copy)'
debug: Inserted is_in_str_substr_header@1.ops[8]: 'store cant_find%5#0 to l-stack (copy)'
debug: Replaced is_in_str_substr_header@1.ops[10]: 'load cant_find%5#0 from scratch' with 'load cant_find%5#0 from l-stack (no copy)'
debug: Inserted is_in_str_substr_body@2.ops[4]: 'store substr%6#0 to l-stack (copy)'
debug: Replaced is_in_str_substr_body@2.ops[6]: 'load substr%6#0 from scratch' with 'load substr%6#0 from l-stack (no copy)'
debug: Inserted is_in_str_substr_body@2.ops[9]: 'store found%0#1 to l-stack (copy)'
debug: Replaced is_in_str_substr_body@2.ops[11]: 'load found%0#1 from scratch' with 'load found%0#1 from l-stack (no copy)'
debug: Inserted is_in_str_substr_body@2.ops[12]: 'store found%0#1 to l-stack (copy)'
debug: Replaced is_in_str_substr_body@2.ops[14]: 'load found%0#1 from scratch' with 'load found%0#1 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.string_ops.contract.is_in_str
debug: examples.string_ops.contract.is_in_str f-stack entry: ['found%0#1', 'search_end%4#0']
debug: examples.string_ops.contract.is_in_str f-stack on first store: ['found%0#0', 'len_sequence%1#0', 'len_item%2#0', 'search_start%3#0']
info: Writing <git root>/examples/string_ops/out/contract.approval.teal
info: Writing <git root>/examples/string_ops/out/contract.approval.debug.teal
info: Writing <git root>/examples/string_ops/out/contract.clear.teal
info: Writing <git root>/examples/string_ops/out/contract.clear.debug.teal
>> exit code = 0