// Op                                                                          // Op Description                                   Stack (out)                                                                                                               X stack Source code                                                                                     Source line

#pragma version 8

// examples.tuple_support.TupleSupport.approval_program() -> uint64:
main_block@0:
        txn ApplicationID                                                      //                                                  {txn}
        bnz main_entrypoint@2                                                  //
        // Implicit fall through to main_on_create@1                           //

main_on_create@1:
        callsub __init__                                                       //
        // Implicit fall through to main_entrypoint@2                          //

main_entrypoint@2:
        int 101                                                                //                                                  101                                                                                                                               101                                                                                             File "tuple_support.py", line 9
        int 102                                                                //                                                  101,102                                                                                                                           102                                                                                             File "tuple_support.py", line 9
        int 103                                                                //                                                  101,102,103                                                                                                                       103                                                                                             File "tuple_support.py", line 9
        callsub add_three_values                                               //                                                  {add_three_values}                                                                                                                add_three_values((UInt64(101), UInt64(102), UInt64(103)))                                       File "tuple_support.py", line 9
        itob                                                                   //                                                  {itob}                                                                                                                            itob(total)                                                                                     File "tuple_support.py", line 10
        log                                                                    //                                                                                                                                                                                    log(itob(total))                                                                                File "tuple_support.py", line 10
        int 1                                                                  //                                                  1                                                                                                                                 1                                                                                               File "tuple_support.py", line 11
        int 2                                                                  //                                                  1,2                                                                                                                               2                                                                                               File "tuple_support.py", line 11
        addw                                                                   //                                                  {addw}.0,{addw}.1                                                                                                                 addw(a, b)                                                                                      File "tuple_support.py", line 12
        byte "state"                                                           //                                                  did_overflow#0,tuple_assignment%3#0,"state"                                                                                       self.state                                                                                      File "tuple_support.py", line 12
        uncover 1                                                              // load tuple_assignment%3#0 from l-stack (no copy) did_overflow#0,"state",tuple_assignment%3#0                                                                                       addw(a, b)                                                                                      File "tuple_support.py", line 12
        app_global_put                                                         //                                                  did_overflow#0                                                                                                                    (did_overflow, self.state) = addw(a, b)                                                         File "tuple_support.py", line 12
        !                                                                      //                                                  {!}                                                                                                                               not did_overflow                                                                                File "tuple_support.py", line 13
        assert                                                                 //                                                                                                                                                                                    assert not did_overflow, "overflow!"                                                            File "tuple_support.py", line 13
        int 1                                                                  //                                                  1                                                                                                                                 1                                                                                               File "tuple_support.py", line 11
        int 2                                                                  //                                                  1,2                                                                                                                               2                                                                                               File "tuple_support.py", line 11
        addw                                                                   //                                                  {addw}.0,{addw}.1                                                                                                                 addw(a, b)                                                                                      File "tuple_support.py", line 15
        pop                                                                    //                                                  {addw}.0                                                                                                                          result                                                                                          File "tuple_support.py", line 15
        !                                                                      //                                                  {!}                                                                                                                               not result[0]                                                                                   File "tuple_support.py", line 16
        assert                                                                 //                                                                                                                                                                                    assert not result[0], "overflow!"                                                               File "tuple_support.py", line 16
        int 1                                                                  //                                                  1                                                                                                                                 a2 == a                                                                                         File "tuple_support.py", line 26
        assert                                                                 //                                                                                                                                                                                    assert a2 == a                                                                                  File "tuple_support.py", line 26
        int 1                                                                  //                                                  1                                                                                                                                 b2 == b                                                                                         File "tuple_support.py", line 27
        assert                                                                 //                                                                                                                                                                                    assert b2 == b                                                                                  File "tuple_support.py", line 27
        int 1                                                                  //                                                  1                                                                                                                                 cd[0] == tup[0]                                                                                 File "tuple_support.py", line 28
        assert                                                                 //                                                                                                                                                                                    assert cd[0] == tup[0]                                                                          File "tuple_support.py", line 28
        int 1                                                                  //                                                  1                                                                                                                                 cd[1] == tup[1]                                                                                 File "tuple_support.py", line 29
        assert                                                                 //                                                                                                                                                                                    assert cd[1] == tup[1]                                                                          File "tuple_support.py", line 29
        byte "Hello, "                                                         //                                                  "Hello, "                                                                                                                         b"Hello, "                                                                                      File "tuple_support.py", line 33
        byte "world!"                                                          //                                                  "Hello, ","world!"                                                                                                                b"world!"                                                                                       File "tuple_support.py", line 33
        callsub bytes_combine                                                  //                                                  {bytes_combine}                                                                                                                   bytes_combine((Bytes(b"Hello, "), Bytes(b"world!")))                                            File "tuple_support.py", line 33
        log                                                                    //                                                                                                                                                                                    log(bytes_combine((Bytes(b"Hello, "), Bytes(b"world!"))))                                       File "tuple_support.py", line 33
        int 18446744073709551615                                               //                                                  18446744073709551615                                                                                                              2**64 - 1                                                                                       File "tuple_support.py", line 34
        int 18446744073709551615                                               //                                                  18446744073709551615,18446744073709551615                                                                                         2**64 - 1                                                                                       File "tuple_support.py", line 34
        addw                                                                   //                                                  {addw}.0,{addw}.1                                                                                                                 addw(max_uint64, max_uint64)                                                                    File "tuple_support.py", line 35
        cover 1                                                                // store tmp%13#0 to l-stack (no copy)              tmp%13#0,{addw}.0                                                                                                                 addw(max_uint64, max_uint64)                                                                    File "tuple_support.py", line 35
        int 1                                                                  //                                                  tmp%13#0,tmp%12#0,1                                                                                                               1                                                                                               File "tuple_support.py", line 11
        int 2                                                                  //                                                  tmp%13#0,tmp%12#0,1,2                                                                                                             2                                                                                               File "tuple_support.py", line 11
        addw                                                                   //                                                  tmp%13#0,tmp%12#0,{addw}.0,{addw}.1                                                                                               addw(a, b)                                                                                      File "tuple_support.py", line 35
        cover 1                                                                // store tmp%15#0 to l-stack (no copy)              tmp%13#0,tmp%12#0,tmp%15#0,{addw}.0                                                                                               addw(a, b)                                                                                      File "tuple_support.py", line 35
        uncover 2                                                              // load tmp%12#0 from l-stack (no copy)             tmp%13#0,tmp%15#0,tmp%14#0,tmp%12#0                                                                                               addw(max_uint64, max_uint64)                                                                    File "tuple_support.py", line 35
        uncover 3                                                              // load tmp%13#0 from l-stack (no copy)             tmp%15#0,tmp%14#0,tmp%12#0,tmp%13#0                                                                                               addw(max_uint64, max_uint64)                                                                    File "tuple_support.py", line 35
        uncover 2                                                              // load tmp%14#0 from l-stack (no copy)             tmp%15#0,tmp%12#0,tmp%13#0,tmp%14#0                                                                                               addw(a, b)                                                                                      File "tuple_support.py", line 35
        uncover 3                                                              // load tmp%15#0 from l-stack (no copy)             tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0                                                                                               addw(a, b)                                                                                      File "tuple_support.py", line 35
        callsub addw2                                                          //                                                  {addw2}.0,{addw2}.1,{addw2}.2                                                                                                     addw2(addw(max_uint64, max_uint64), addw(a, b))                                                 File "tuple_support.py", line 35
        cover 2                                                                // store lo#0 to l-stack (no copy)                  lo#0,{addw2}.0,{addw2}.1                                                                                                          lo                                                                                              File "tuple_support.py", line 35
        cover 1                                                                // store mid#0 to l-stack (no copy)                 lo#0,mid#0,{addw2}.0                                                                                                              mid                                                                                             File "tuple_support.py", line 35
        itob                                                                   //                                                  lo#0,mid#0,{itob}                                                                                                                 itob(hi)                                                                                        File "tuple_support.py", line 36
        log                                                                    //                                                  lo#0,mid#0                                                                                                                        log(itob(hi))                                                                                   File "tuple_support.py", line 36
        itob                                                                   //                                                  lo#0,{itob}                                                                                                                       itob(mid)                                                                                       File "tuple_support.py", line 37
        log                                                                    //                                                  lo#0                                                                                                                              log(itob(mid))                                                                                  File "tuple_support.py", line 37
        itob                                                                   //                                                  {itob}                                                                                                                            itob(lo)                                                                                        File "tuple_support.py", line 38
        log                                                                    //                                                                                                                                                                                    log(itob(lo))                                                                                   File "tuple_support.py", line 38
        byte "na"                                                              //                                                  "na"                                                                                                                              b"na"                                                                                           File "tuple_support.py", line 39
        int 5                                                                  //                                                  "na",5                                                                                                                            5                                                                                               File "tuple_support.py", line 39
        callsub bytes_multiply                                                 //                                                  {bytes_multiply}                                                                                                                  bytes_multiply((Bytes(b"na"), UInt64(5)))                                                       File "tuple_support.py", line 39
        log                                                                    //                                                                                                                                                                                    log(bytes_multiply((Bytes(b"na"), UInt64(5))))                                                  File "tuple_support.py", line 39
        int 0                                                                  //                                                  0                                                                                                                                 0                                                                                               File "tuple_support.py", line 40
        callsub test_tuple_swap                                                //                                                                                                                                                                                    test_tuple_swap(zero=UInt64(0))                                                                 File "tuple_support.py", line 40
        int 3                                                                  //                                                  3                                                                                                                                 a + b                                                                                           File "tuple_support.py", line 41
        return                                                                 //                                                                                                                                                                                    return a + b                                                                                    File "tuple_support.py", line 41


// examples.tuple_support.add_three_values(values.0#0: uint64, values.1#0: uint64, values.2#0: uint64) -> uint64:
add_three_values:
        proto 3 1                                                              //                                                  (𝕡) values.0#0,values.1#0,values.2#0 |                                                                                            def add_three_values(values: tuple[UInt64, UInt64, UInt64]) -> UInt64:                          File "tuple_support.py", line 65
        byte ""                                                                // allocate 1 to stack                              (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4 |

add_three_values_block@0:
        int 0                                                                  //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4 | 0                                                                    0                                                                                               File "tuple_support.py", line 66
        int 0                                                                  //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0 | 0
        frame_dig -3                                                           // load values.0#0 from parameters                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | values.0#0                                   values: tuple[UInt64, UInt64, UInt64]                                                           File "tuple_support.py", line 65
        b add_three_values_for_body@4                                          //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 |                        value#3

add_three_values_for_header_1@2:
        frame_dig -2                                                           // load values.1#0 from parameters                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | values.1#0                                   values: tuple[UInt64, UInt64, UInt64]                                                           File "tuple_support.py", line 65
        frame_dig 0                                                            // load tuple_index%0#4 from f-stack                (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 | tuple_index%0#4
        frame_bury 2                                                           // store tuple_index%0#0 to f-stack                 (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 |
        b add_three_values_for_body@4                                          //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 |                        value#3

add_three_values_for_header_2@3:
        frame_dig -1                                                           // load values.2#0 from parameters                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | values.2#0                                   values: tuple[UInt64, UInt64, UInt64]                                                           File "tuple_support.py", line 65
        frame_dig 0                                                            // load tuple_index%0#4 from f-stack                (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 | tuple_index%0#4
        frame_bury 2                                                           // store tuple_index%0#0 to f-stack                 (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 |
        // Implicit fall through to add_three_values_for_body@4                //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 |                        value#3

add_three_values_for_body@4:
        frame_dig 1                                                            // load total#0 from f-stack                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | (𝕏) value#3 | total#0                value#3 total                                                                                           File "tuple_support.py", line 66
        +                                                                      //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | {+}                                          total += value                                                                                  File "tuple_support.py", line 69
        frame_bury 1                                                           // store total#0 to f-stack                         (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 |                                              total                                                                                           File "tuple_support.py", line 66
        frame_dig 2                                                            // load tuple_index%0#0 from f-stack                (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | tuple_index%0#0
        dup                                                                    // store tuple_index%0#0 to l-stack (copy)          (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | tuple_index%0#0,tuple_index%0#0
        int 1                                                                  //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | tuple_index%0#0,tuple_index%0#0,1
        +                                                                      //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | tuple_index%0#0,{+}
        frame_bury 0                                                           // store tuple_index%0#4 to f-stack                 (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | tuple_index%0#0
        switch add_three_values_for_header_1@2 add_three_values_for_header_2@3 //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 |                                              for value in values:                                                                            File "tuple_support.py", line 67
        // Implicit fall through to add_three_values_after_for@6               //                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 |                                              for value in values:                                                                            File "tuple_support.py", line 67

add_three_values_after_for@6:
        frame_dig 1                                                            // load total#0 from f-stack                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) tuple_index%0#4,total#0,tuple_index%0#0 | total#0                                      total                                                                                           File "tuple_support.py", line 66
        frame_bury 0
        retsub                                                                 //                                                  total#0                                                                                                                           return total                                                                                    File "tuple_support.py", line 72


// examples.tuple_support.bytes_combine(arg.0#0: bytes, arg.1#0: bytes) -> bytes:
bytes_combine:
        proto 2 1                                                              //                                                  (𝕡) arg.0#0,arg.1#0 |                                                                                                             def bytes_combine(arg: tuple[Bytes, Bytes]) -> Bytes:                                           File "tuple_support.py", line 48

bytes_combine_block@0:
        frame_dig -2                                                           // load arg.0#0 from parameters                     (𝕡) arg.0#0,arg.1#0 | arg.0#0                                                                                                     arg: tuple[Bytes, Bytes]                                                                        File "tuple_support.py", line 48
        frame_dig -1                                                           // load arg.1#0 from parameters                     (𝕡) arg.0#0,arg.1#0 | arg.0#0,arg.1#0                                                                                             arg: tuple[Bytes, Bytes]                                                                        File "tuple_support.py", line 48
        concat                                                                 //                                                  (𝕡) arg.0#0,arg.1#0 | {concat}                                                                                                    a + b                                                                                           File "tuple_support.py", line 50
        retsub                                                                 //                                                  result#0                                                                                                                          return result                                                                                   File "tuple_support.py", line 51


// examples.tuple_support.addw2(a.0#0: uint64, a.1#0: uint64, b.0#0: uint64, b.1#0: uint64) -> uint64, uint64, uint64:
addw2:
        proto 4 3                                                              //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 |                                                                                                     def addw2(a: tuple[UInt64, UInt64], b: tuple[UInt64, UInt64]) -> tuple[UInt64, UInt64, UInt64]: File "tuple_support.py", line 76

addw2_block@0:
        frame_dig -3                                                           // load a.1#0 from parameters                       (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | a.1#0                                                                                               a: tuple[UInt64, UInt64]                                                                        File "tuple_support.py", line 76
        frame_dig -1                                                           // load b.1#0 from parameters                       (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | a.1#0,b.1#0                                                                                         b: tuple[UInt64, UInt64]                                                                        File "tuple_support.py", line 76
        addw                                                                   //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | {addw}.0,{addw}.1                                                                                   addw(a_lo, b_lo)                                                                                File "tuple_support.py", line 79
        cover 1                                                                // store c_lo#0 to l-stack (no copy)                (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,{addw}.0                                                                                     c_lo                                                                                            File "tuple_support.py", line 79
        frame_dig -4                                                           // load a.0#0 from parameters                       (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,lo_carry#0,a.0#0                                                                             a: tuple[UInt64, UInt64]                                                                        File "tuple_support.py", line 76
        frame_dig -2                                                           // load b.0#0 from parameters                       (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,lo_carry#0,a.0#0,b.0#0                                                                       b: tuple[UInt64, UInt64]                                                                        File "tuple_support.py", line 76
        addw                                                                   //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,lo_carry#0,{addw}.0,{addw}.1                                                                 addw(a_hi, b_hi)                                                                                File "tuple_support.py", line 80
        uncover 2                                                              // load lo_carry#0 from l-stack (no copy)           (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,hi_carry1#0,c_mid#0,lo_carry#0                                                               lo_carry                                                                                        File "tuple_support.py", line 79
        addw                                                                   //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,hi_carry1#0,{addw}.0,{addw}.1                                                                addw(c_mid, lo_carry)                                                                           File "tuple_support.py", line 81
        cover 2                                                                // store c_mid#0 to l-stack (no copy)               (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,hi_carry1#0,{addw}.0                                                                 c_mid                                                                                           File "tuple_support.py", line 80
        addw                                                                   //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,{addw}.0,{addw}.1                                                                    addw(hi_carry1, hi_carry2)                                                                      File "tuple_support.py", line 82
        cover 1                                                                // store c_hi#0 to l-stack (no copy)                (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0,{addw}.0                                                                      c_hi                                                                                            File "tuple_support.py", line 82
        !                                                                      //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0,{!}                                                                           not did_overflow                                                                                File "tuple_support.py", line 83
        assert                                                                 //                                                  (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0                                                                               assert not did_overflow, "is such a thing even possible? 👽"                                     File "tuple_support.py", line 83
        uncover 1                                                              // load c_mid#0 from l-stack (no copy)              (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_hi#0,c_mid#0                                                                               c_mid                                                                                           File "tuple_support.py", line 80
        uncover 2                                                              // load c_lo#0 from l-stack (no copy)               (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_hi#0,c_mid#0,c_lo#0                                                                               c_lo                                                                                            File "tuple_support.py", line 79
        retsub                                                                 //                                                  c_hi#0,c_mid#0,c_lo#0                                                                                                             return c_hi, c_mid, c_lo                                                                        File "tuple_support.py", line 84


// examples.tuple_support.bytes_multiply(arg.0#0: bytes, arg.1#0: uint64) -> bytes:
bytes_multiply:
        proto 2 1                                                              //                                                  (𝕡) arg.0#0,arg.1#0 |                                                                                                             def bytes_multiply(arg: tuple[Bytes, UInt64]) -> Bytes:                                         File "tuple_support.py", line 55

bytes_multiply_block@0:
        byte ""                                                                //                                                  (𝕡) arg.0#0,arg.1#0 | ""                                                                                                          b""                                                                                             File "tuple_support.py", line 58
        int 0                                                                  //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0 | 0                                                                                            urange(count)                                                                                   File "tuple_support.py", line 59
        // Implicit fall through to bytes_multiply_for_header@1                //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |

bytes_multiply_for_header@1:
        frame_dig 1                                                            // load _i#0 from f-stack                           (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0                                                                                    _i                                                                                              File "tuple_support.py", line 59
        frame_dig -1                                                           // load arg.1#0 from parameters                     (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0,arg.1#0                                                                            arg: tuple[Bytes, UInt64]                                                                       File "tuple_support.py", line 55
        <                                                                      //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | {<}                                                                                     urange(count)                                                                                   File "tuple_support.py", line 59
        bz bytes_multiply_after_for@4                                          //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |                                                                                         for _i in urange(count):  # TODO: allow _                                                       File "tuple_support.py", line 59
        // Implicit fall through to bytes_multiply_for_body@2                  //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |                                                                                         for _i in urange(count):  # TODO: allow _                                                       File "tuple_support.py", line 59

bytes_multiply_for_body@2:
        frame_dig 0                                                            // load result#0 from f-stack                       (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | result#0                                                                                result                                                                                          File "tuple_support.py", line 58
        frame_dig -2                                                           // load arg.0#0 from parameters                     (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | result#0,arg.0#0                                                                        arg: tuple[Bytes, UInt64]                                                                       File "tuple_support.py", line 55
        concat                                                                 //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | {concat}                                                                                result + b                                                                                      File "tuple_support.py", line 60
        frame_bury 0                                                           // store result#0 to f-stack                        (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |                                                                                         result                                                                                          File "tuple_support.py", line 58
        frame_dig 1                                                            // load _i#0 from f-stack                           (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0                                                                                    _i                                                                                              File "tuple_support.py", line 59
        int 1                                                                  //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0,1                                                                                  urange(count)                                                                                   File "tuple_support.py", line 59
        +                                                                      //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | {+}                                                                                     urange(count)                                                                                   File "tuple_support.py", line 59
        frame_bury 1                                                           // store _i#0 to f-stack                            (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |                                                                                         _i                                                                                              File "tuple_support.py", line 59
        b bytes_multiply_for_header@1                                          //                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |

bytes_multiply_after_for@4:
        retsub                                                                 // virtual: 2 ops                                   result#0                                                                                                                          result = Bytes(b"")  # TODO: allow no-args -> empty                                             File "tuple_support.py", line 58


// examples.tuple_support.test_tuple_swap(zero#0: uint64) -> :
test_tuple_swap:
        proto 1 0                                                              //                                                  (𝕡) zero#0 |                                                                                                                      def test_tuple_swap(zero: UInt64) -> None:                                                      File "tuple_support.py", line 88

test_tuple_swap_block@0:
        frame_dig -1                                                           // load zero#0 from parameters                      (𝕡) zero#0 | zero#0                                                                                                               zero: UInt64                                                                                    File "tuple_support.py", line 88
        int 1                                                                  //                                                  (𝕡) zero#0 | zero#0,1                                                                                                             1                                                                                               File "tuple_support.py", line 89
        +                                                                      //                                                  (𝕡) zero#0 | {+}                                                                                                                  zero + 1                                                                                        File "tuple_support.py", line 89
        frame_dig -1                                                           // load zero#0 from parameters                      (𝕡) zero#0 | a#0,zero#0                                                                                                           zero: UInt64                                                                                    File "tuple_support.py", line 88
        int 2                                                                  //                                                  (𝕡) zero#0 | a#0,zero#0,2                                                                                                         2                                                                                               File "tuple_support.py", line 90
        +                                                                      //                                                  (𝕡) zero#0 | a#0,{+}                                                                                                              zero + 2                                                                                        File "tuple_support.py", line 90
        int 2                                                                  //                                                  (𝕡) zero#0 | a#0,b#0,2                                                                                                            2                                                                                               File "tuple_support.py", line 92
        ==                                                                     //                                                  (𝕡) zero#0 | a#0,{==}                                                                                                             a == 2, "a should be two"                                                                       File "tuple_support.py", line 92
        assert                                                                 //                                                  (𝕡) zero#0 | a#0                                                                                                                  assert a == 2, "a should be two"                                                                File "tuple_support.py", line 92
        int 1                                                                  //                                                  (𝕡) zero#0 | a#0,1                                                                                                                1                                                                                               File "tuple_support.py", line 93
        ==                                                                     //                                                  (𝕡) zero#0 | {==}                                                                                                                 b == 1, "b should be one"                                                                       File "tuple_support.py", line 93
        assert                                                                 //                                                  (𝕡) zero#0 |                                                                                                                      assert b == 1, "b should be one"                                                                File "tuple_support.py", line 93
        retsub                                                                 //


// examples.tuple_support.TupleSupport.__init__() -> :
__init__:
        proto 0 0                                                              //                                                                                                                                                                                    def __init__(self) -> None:                                                                     File "tuple_support.py", line 5

__init___block@0:
        byte "state"                                                           //                                                  "state"                                                                                                                           self.state                                                                                      File "tuple_support.py", line 6
        int 0                                                                  //                                                  "state",0                                                                                                                         0                                                                                               File "tuple_support.py", line 6
        app_global_put                                                         //                                                                                                                                                                                    self.state = UInt64(0)                                                                          File "tuple_support.py", line 6
        retsub                                                                 //

