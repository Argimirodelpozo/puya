>> poetry run algopy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 asset
info: Building AWST for __init__.py
info: Building AWST for asset
info: Building AWST for asset/contract.py
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@0: // L17
debug: Terminated block@0: // L17
debug: Sealing block@None: // on_create_L14
debug: Terminated block@1: // on_create_L14
debug: Sealing block@2: // entrypoint_L14
debug: Terminated block@2: // entrypoint_L14
debug: Sealing block@None: // if_body_L18
debug: Sealing block@None: // else_body_L18
debug: Terminated block@3: // if_body_L18
debug: Sealing block@None: // if_body_L19
debug: Sealing block@None: // else_body_L19
debug: Terminated block@4: // if_body_L19
debug: Terminated block@5: // else_body_L19
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@6: // if_body_L22
debug: Terminated block@7: // else_body_L22
debug: Sealing block@8: // after_if_else_L22
debug: Terminated block@8: // after_if_else_L22
debug: Sealing block@9: // after_if_else_L19
debug: Terminated block@9: // after_if_else_L19
debug: Sealing block@10: // after_if_else_L18
debug: Terminated block@10: // after_if_else_L18
debug: Sealing block@0: // L29
debug: Terminated block@0: // L29
debug: Output IR to <git root>/examples/asset/out/contract_Reference.ssa.ir
info: Optimizing examples.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.asset.contract.Reference.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@8: // after_if_else_L22 with block@6: // if_body_L22 in block@9: // after_if_else_L19
debug: Merged linear block@8: // after_if_else_L22 into block@6: // if_body_L22
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@9: // after_if_else_L19
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.opt_into_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.is_opted_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/asset/out/contract_Reference.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.asset.contract.Reference.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.opt_into_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.is_opted_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/asset/out/contract_Reference.cssa.ir
debug: Removing Phis from examples.asset.contract.Reference.approval_program
debug: Removing Phis from examples.asset.contract.Reference.opt_into_asset
debug: Removing Phis from examples.asset.contract.Reference.is_opted_asset
debug: Removing Phis from examples.asset.contract.Reference.__init__
debug: Removing Phis from examples.asset.contract.Reference.clear_state_program
debug: Output IR to <git root>/examples/asset/out/contract_Reference.post_ssa.ir
debug: Sequentializing parallel copies in examples.asset.contract.Reference.approval_program
debug: Sequentializing parallel copies in examples.asset.contract.Reference.opt_into_asset
debug: Sequentializing parallel copies in examples.asset.contract.Reference.is_opted_asset
debug: Sequentializing parallel copies in examples.asset.contract.Reference.__init__
debug: Sequentializing parallel copies in examples.asset.contract.Reference.clear_state_program
debug: Output IR to <git root>/examples/asset/out/contract_Reference.parallel_copies.ir
debug: Coalescing local variables in examples.asset.contract.Reference.approval_program using strategy RootOperandGrouping
debug: Coalescing asset#0 with [asset#1]
debug: Coalescing resulted in 2 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.opt_into_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.is_opted_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/asset/out/contract_Reference.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0 from scratch' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[6]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[8]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[3]: 'load tmp%3#0 from scratch' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[8]: 'load tmp%4#0 from scratch' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_if_body@4.ops[1]: 'store asset#0 to l-stack (copy)'
debug: Replaced main_if_body@4.ops[3]: 'load asset#0 from scratch' with 'load asset#0 from l-stack (no copy)'
debug: Inserted main_else_body@5.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_else_body@5.ops[3]: 'load tmp%5#0 from scratch' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_else_body@5.ops[6]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_else_body@5.ops[8]: 'load tmp%6#0 from scratch' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[1]: 'store asset#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[3]: 'load asset#0 from scratch' with 'load asset#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.asset.contract.Reference.approval_program
debug: Inserted opt_into_asset_block@0.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[9]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[20]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[22]: 'load tmp%5#0 from scratch' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[33]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[35]: 'load tmp%6#0 from scratch' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[6]: 'load tmp%1#0 from scratch' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[15]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[18]: 'load app_global_get_ex_did_exist%4#0 from scratch' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[6]: 'load tmp%0#0 from scratch' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[18]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[22]: 'load app_global_get_ex_value%3#0 from scratch' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[12]: 'load tmp%2#0 from scratch' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[3]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[6]: 'load app_global_get_ex_did_exist%1#0 from scratch' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[5]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[9]: 'load app_global_get_ex_value%0#0 from scratch' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
info: Writing <git root>/examples/asset/out/contract.approval.teal
info: Writing <git root>/examples/asset/out/contract.approval.debug.teal
info: Writing <git root>/examples/asset/out/contract.clear.teal
info: Writing <git root>/examples/asset/out/contract.clear.debug.teal
>> exit code = 0